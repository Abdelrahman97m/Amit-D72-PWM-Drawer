
Final_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001a02  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004a  00800060  00001a02  00001a96  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  008000aa  008000aa  00001ae0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001ae0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001b10  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a8  00000000  00000000  00001b4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000023ed  00000000  00000000  00001cf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c0e  00000000  00000000  000040e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000012e4  00000000  00000000  00004cef  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000498  00000000  00000000  00005fd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d1d  00000000  00000000  0000646c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001aca  00000000  00000000  00007189  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  00008c53  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 85 00 	jmp	0x10a	; 0x10a <__ctors_end>
       4:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
       8:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
       c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      10:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      14:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      18:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      1c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      20:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      24:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      28:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      2c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      30:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      34:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      38:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      3c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      40:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      44:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      48:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      4c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      50:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      54:	e6 03       	fmuls	r22, r22
      56:	69 04       	cpc	r6, r9
      58:	69 04       	cpc	r6, r9
      5a:	69 04       	cpc	r6, r9
      5c:	69 04       	cpc	r6, r9
      5e:	c5 03       	fmuls	r20, r21
      60:	69 04       	cpc	r6, r9
      62:	69 04       	cpc	r6, r9
      64:	69 04       	cpc	r6, r9
      66:	69 04       	cpc	r6, r9
      68:	69 04       	cpc	r6, r9
      6a:	69 04       	cpc	r6, r9
      6c:	69 04       	cpc	r6, r9
      6e:	f1 03       	fmuls	r23, r17
      70:	db 03       	fmulsu	r21, r19
      72:	69 04       	cpc	r6, r9
      74:	fc 03       	fmulsu	r23, r20
      76:	07 04       	cpc	r0, r7
      78:	12 04       	cpc	r1, r2
      7a:	1d 04       	cpc	r1, r13
      7c:	28 04       	cpc	r2, r8
      7e:	33 04       	cpc	r3, r3
      80:	3e 04       	cpc	r3, r14
      82:	49 04       	cpc	r4, r9
      84:	54 04       	cpc	r5, r4
      86:	5f 04       	cpc	r5, r15
      88:	69 04       	cpc	r6, r9
      8a:	69 04       	cpc	r6, r9
      8c:	69 04       	cpc	r6, r9
      8e:	d0 03       	fmuls	r21, r16
      90:	69 04       	cpc	r6, r9
      92:	69 04       	cpc	r6, r9
      94:	69 04       	cpc	r6, r9
      96:	0a 03       	fmul	r16, r18
      98:	69 04       	cpc	r6, r9
      9a:	57 03       	mulsu	r21, r23
      9c:	6d 03       	fmul	r22, r21
      9e:	2b 03       	fmul	r18, r19
      a0:	15 03       	mulsu	r17, r21
      a2:	69 04       	cpc	r6, r9
      a4:	8e 03       	fmulsu	r16, r22
      a6:	ba 03       	fmulsu	r19, r18
      a8:	69 04       	cpc	r6, r9
      aa:	83 03       	fmuls	r16, r19
      ac:	69 04       	cpc	r6, r9
      ae:	a4 03       	fmuls	r18, r20
      b0:	4c 03       	fmul	r20, r20
      b2:	69 04       	cpc	r6, r9
      b4:	69 04       	cpc	r6, r9
      b6:	36 03       	mulsu	r19, r22
      b8:	20 03       	mulsu	r18, r16
      ba:	af 03       	fmulsu	r18, r23
      bc:	78 03       	fmul	r23, r16
      be:	41 03       	mulsu	r20, r17
      c0:	69 04       	cpc	r6, r9
      c2:	69 04       	cpc	r6, r9
      c4:	69 04       	cpc	r6, r9
      c6:	62 03       	mulsu	r22, r18
      c8:	99 03       	fmulsu	r17, r17
      ca:	69 04       	cpc	r6, r9
      cc:	69 04       	cpc	r6, r9
      ce:	69 04       	cpc	r6, r9
      d0:	69 04       	cpc	r6, r9
      d2:	69 04       	cpc	r6, r9
      d4:	69 04       	cpc	r6, r9
      d6:	0a 03       	fmul	r16, r18
      d8:	69 04       	cpc	r6, r9
      da:	57 03       	mulsu	r21, r23
      dc:	6d 03       	fmul	r22, r21
      de:	2b 03       	fmul	r18, r19
      e0:	15 03       	mulsu	r17, r21
      e2:	69 04       	cpc	r6, r9
      e4:	8e 03       	fmulsu	r16, r22
      e6:	ba 03       	fmulsu	r19, r18
      e8:	69 04       	cpc	r6, r9
      ea:	83 03       	fmuls	r16, r19
      ec:	69 04       	cpc	r6, r9
      ee:	a4 03       	fmuls	r18, r20
      f0:	4c 03       	fmul	r20, r20
      f2:	69 04       	cpc	r6, r9
      f4:	69 04       	cpc	r6, r9
      f6:	36 03       	mulsu	r19, r22
      f8:	20 03       	mulsu	r18, r16
      fa:	af 03       	fmulsu	r18, r23
      fc:	78 03       	fmul	r23, r16
      fe:	41 03       	mulsu	r20, r17
     100:	69 04       	cpc	r6, r9
     102:	69 04       	cpc	r6, r9
     104:	69 04       	cpc	r6, r9
     106:	62 03       	mulsu	r22, r18
     108:	99 03       	fmulsu	r17, r17

0000010a <__ctors_end>:
     10a:	11 24       	eor	r1, r1
     10c:	1f be       	out	0x3f, r1	; 63
     10e:	cf e5       	ldi	r28, 0x5F	; 95
     110:	d8 e0       	ldi	r29, 0x08	; 8
     112:	de bf       	out	0x3e, r29	; 62
     114:	cd bf       	out	0x3d, r28	; 61

00000116 <__do_copy_data>:
     116:	10 e0       	ldi	r17, 0x00	; 0
     118:	a0 e6       	ldi	r26, 0x60	; 96
     11a:	b0 e0       	ldi	r27, 0x00	; 0
     11c:	e2 e0       	ldi	r30, 0x02	; 2
     11e:	fa e1       	ldi	r31, 0x1A	; 26
     120:	02 c0       	rjmp	.+4      	; 0x126 <__do_copy_data+0x10>
     122:	05 90       	lpm	r0, Z+
     124:	0d 92       	st	X+, r0
     126:	aa 3a       	cpi	r26, 0xAA	; 170
     128:	b1 07       	cpc	r27, r17
     12a:	d9 f7       	brne	.-10     	; 0x122 <__do_copy_data+0xc>

0000012c <__do_clear_bss>:
     12c:	20 e0       	ldi	r18, 0x00	; 0
     12e:	aa ea       	ldi	r26, 0xAA	; 170
     130:	b0 e0       	ldi	r27, 0x00	; 0
     132:	01 c0       	rjmp	.+2      	; 0x136 <.do_clear_bss_start>

00000134 <.do_clear_bss_loop>:
     134:	1d 92       	st	X+, r1

00000136 <.do_clear_bss_start>:
     136:	af 3a       	cpi	r26, 0xAF	; 175
     138:	b2 07       	cpc	r27, r18
     13a:	e1 f7       	brne	.-8      	; 0x134 <.do_clear_bss_loop>
     13c:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <main>
     140:	0c 94 ff 0c 	jmp	0x19fe	; 0x19fe <_exit>

00000144 <__bad_interrupt>:
     144:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000148 <DIO_u8SetPinDirection>:
	else
	Local_ERR_state =NOK;
	
	return Local_ERR_state;
	
}
     148:	68 30       	cpi	r22, 0x08	; 8
     14a:	08 f0       	brcs	.+2      	; 0x14e <DIO_u8SetPinDirection+0x6>
     14c:	78 c0       	rjmp	.+240    	; 0x23e <DIO_u8SetPinDirection+0xf6>
     14e:	41 30       	cpi	r20, 0x01	; 1
     150:	c1 f5       	brne	.+112    	; 0x1c2 <DIO_u8SetPinDirection+0x7a>
     152:	81 30       	cpi	r24, 0x01	; 1
     154:	91 f0       	breq	.+36     	; 0x17a <DIO_u8SetPinDirection+0x32>
     156:	28 f0       	brcs	.+10     	; 0x162 <DIO_u8SetPinDirection+0x1a>
     158:	82 30       	cpi	r24, 0x02	; 2
     15a:	d9 f0       	breq	.+54     	; 0x192 <DIO_u8SetPinDirection+0x4a>
     15c:	83 30       	cpi	r24, 0x03	; 3
     15e:	29 f1       	breq	.+74     	; 0x1aa <DIO_u8SetPinDirection+0x62>
     160:	70 c0       	rjmp	.+224    	; 0x242 <DIO_u8SetPinDirection+0xfa>
     162:	2a b3       	in	r18, 0x1a	; 26
     164:	81 e0       	ldi	r24, 0x01	; 1
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	02 c0       	rjmp	.+4      	; 0x16e <DIO_u8SetPinDirection+0x26>
     16a:	88 0f       	add	r24, r24
     16c:	99 1f       	adc	r25, r25
     16e:	6a 95       	dec	r22
     170:	e2 f7       	brpl	.-8      	; 0x16a <DIO_u8SetPinDirection+0x22>
     172:	82 2b       	or	r24, r18
     174:	8a bb       	out	0x1a, r24	; 26
     176:	81 e0       	ldi	r24, 0x01	; 1
     178:	08 95       	ret
     17a:	27 b3       	in	r18, 0x17	; 23
     17c:	81 e0       	ldi	r24, 0x01	; 1
     17e:	90 e0       	ldi	r25, 0x00	; 0
     180:	02 c0       	rjmp	.+4      	; 0x186 <DIO_u8SetPinDirection+0x3e>
     182:	88 0f       	add	r24, r24
     184:	99 1f       	adc	r25, r25
     186:	6a 95       	dec	r22
     188:	e2 f7       	brpl	.-8      	; 0x182 <DIO_u8SetPinDirection+0x3a>
     18a:	82 2b       	or	r24, r18
     18c:	87 bb       	out	0x17, r24	; 23
     18e:	81 e0       	ldi	r24, 0x01	; 1
     190:	08 95       	ret
     192:	24 b3       	in	r18, 0x14	; 20
     194:	81 e0       	ldi	r24, 0x01	; 1
     196:	90 e0       	ldi	r25, 0x00	; 0
     198:	02 c0       	rjmp	.+4      	; 0x19e <DIO_u8SetPinDirection+0x56>
     19a:	88 0f       	add	r24, r24
     19c:	99 1f       	adc	r25, r25
     19e:	6a 95       	dec	r22
     1a0:	e2 f7       	brpl	.-8      	; 0x19a <DIO_u8SetPinDirection+0x52>
     1a2:	82 2b       	or	r24, r18
     1a4:	84 bb       	out	0x14, r24	; 20
     1a6:	81 e0       	ldi	r24, 0x01	; 1
     1a8:	08 95       	ret
     1aa:	21 b3       	in	r18, 0x11	; 17
     1ac:	81 e0       	ldi	r24, 0x01	; 1
     1ae:	90 e0       	ldi	r25, 0x00	; 0
     1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <DIO_u8SetPinDirection+0x6e>
     1b2:	88 0f       	add	r24, r24
     1b4:	99 1f       	adc	r25, r25
     1b6:	6a 95       	dec	r22
     1b8:	e2 f7       	brpl	.-8      	; 0x1b2 <DIO_u8SetPinDirection+0x6a>
     1ba:	82 2b       	or	r24, r18
     1bc:	81 bb       	out	0x11, r24	; 17
     1be:	81 e0       	ldi	r24, 0x01	; 1
     1c0:	08 95       	ret
     1c2:	41 11       	cpse	r20, r1
     1c4:	40 c0       	rjmp	.+128    	; 0x246 <DIO_u8SetPinDirection+0xfe>
     1c6:	81 30       	cpi	r24, 0x01	; 1
     1c8:	99 f0       	breq	.+38     	; 0x1f0 <DIO_u8SetPinDirection+0xa8>
     1ca:	28 f0       	brcs	.+10     	; 0x1d6 <DIO_u8SetPinDirection+0x8e>
     1cc:	82 30       	cpi	r24, 0x02	; 2
     1ce:	e9 f0       	breq	.+58     	; 0x20a <DIO_u8SetPinDirection+0xc2>
     1d0:	83 30       	cpi	r24, 0x03	; 3
     1d2:	41 f1       	breq	.+80     	; 0x224 <DIO_u8SetPinDirection+0xdc>
     1d4:	3a c0       	rjmp	.+116    	; 0x24a <DIO_u8SetPinDirection+0x102>
     1d6:	2a b3       	in	r18, 0x1a	; 26
     1d8:	81 e0       	ldi	r24, 0x01	; 1
     1da:	90 e0       	ldi	r25, 0x00	; 0
     1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <DIO_u8SetPinDirection+0x9a>
     1de:	88 0f       	add	r24, r24
     1e0:	99 1f       	adc	r25, r25
     1e2:	6a 95       	dec	r22
     1e4:	e2 f7       	brpl	.-8      	; 0x1de <DIO_u8SetPinDirection+0x96>
     1e6:	80 95       	com	r24
     1e8:	82 23       	and	r24, r18
     1ea:	8a bb       	out	0x1a, r24	; 26
     1ec:	81 e0       	ldi	r24, 0x01	; 1
     1ee:	08 95       	ret
     1f0:	27 b3       	in	r18, 0x17	; 23
     1f2:	81 e0       	ldi	r24, 0x01	; 1
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	02 c0       	rjmp	.+4      	; 0x1fc <DIO_u8SetPinDirection+0xb4>
     1f8:	88 0f       	add	r24, r24
     1fa:	99 1f       	adc	r25, r25
     1fc:	6a 95       	dec	r22
     1fe:	e2 f7       	brpl	.-8      	; 0x1f8 <DIO_u8SetPinDirection+0xb0>
     200:	80 95       	com	r24
     202:	82 23       	and	r24, r18
     204:	87 bb       	out	0x17, r24	; 23
     206:	81 e0       	ldi	r24, 0x01	; 1
     208:	08 95       	ret
     20a:	24 b3       	in	r18, 0x14	; 20
     20c:	81 e0       	ldi	r24, 0x01	; 1
     20e:	90 e0       	ldi	r25, 0x00	; 0
     210:	02 c0       	rjmp	.+4      	; 0x216 <DIO_u8SetPinDirection+0xce>
     212:	88 0f       	add	r24, r24
     214:	99 1f       	adc	r25, r25
     216:	6a 95       	dec	r22
     218:	e2 f7       	brpl	.-8      	; 0x212 <DIO_u8SetPinDirection+0xca>
     21a:	80 95       	com	r24
     21c:	82 23       	and	r24, r18
     21e:	84 bb       	out	0x14, r24	; 20
     220:	81 e0       	ldi	r24, 0x01	; 1
     222:	08 95       	ret
     224:	21 b3       	in	r18, 0x11	; 17
     226:	81 e0       	ldi	r24, 0x01	; 1
     228:	90 e0       	ldi	r25, 0x00	; 0
     22a:	02 c0       	rjmp	.+4      	; 0x230 <DIO_u8SetPinDirection+0xe8>
     22c:	88 0f       	add	r24, r24
     22e:	99 1f       	adc	r25, r25
     230:	6a 95       	dec	r22
     232:	e2 f7       	brpl	.-8      	; 0x22c <DIO_u8SetPinDirection+0xe4>
     234:	80 95       	com	r24
     236:	82 23       	and	r24, r18
     238:	81 bb       	out	0x11, r24	; 17
     23a:	81 e0       	ldi	r24, 0x01	; 1
     23c:	08 95       	ret
     23e:	80 e0       	ldi	r24, 0x00	; 0
     240:	08 95       	ret
     242:	80 e0       	ldi	r24, 0x00	; 0
     244:	08 95       	ret
     246:	80 e0       	ldi	r24, 0x00	; 0
     248:	08 95       	ret
     24a:	80 e0       	ldi	r24, 0x00	; 0
     24c:	08 95       	ret

0000024e <DIO_u8SetPinValue>:
     24e:	68 30       	cpi	r22, 0x08	; 8
     250:	08 f0       	brcs	.+2      	; 0x254 <DIO_u8SetPinValue+0x6>
     252:	78 c0       	rjmp	.+240    	; 0x344 <DIO_u8SetPinValue+0xf6>
     254:	41 30       	cpi	r20, 0x01	; 1
     256:	c1 f5       	brne	.+112    	; 0x2c8 <DIO_u8SetPinValue+0x7a>
     258:	81 30       	cpi	r24, 0x01	; 1
     25a:	91 f0       	breq	.+36     	; 0x280 <DIO_u8SetPinValue+0x32>
     25c:	28 f0       	brcs	.+10     	; 0x268 <DIO_u8SetPinValue+0x1a>
     25e:	82 30       	cpi	r24, 0x02	; 2
     260:	d9 f0       	breq	.+54     	; 0x298 <DIO_u8SetPinValue+0x4a>
     262:	83 30       	cpi	r24, 0x03	; 3
     264:	29 f1       	breq	.+74     	; 0x2b0 <DIO_u8SetPinValue+0x62>
     266:	70 c0       	rjmp	.+224    	; 0x348 <DIO_u8SetPinValue+0xfa>
     268:	2b b3       	in	r18, 0x1b	; 27
     26a:	81 e0       	ldi	r24, 0x01	; 1
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	02 c0       	rjmp	.+4      	; 0x274 <DIO_u8SetPinValue+0x26>
     270:	88 0f       	add	r24, r24
     272:	99 1f       	adc	r25, r25
     274:	6a 95       	dec	r22
     276:	e2 f7       	brpl	.-8      	; 0x270 <DIO_u8SetPinValue+0x22>
     278:	82 2b       	or	r24, r18
     27a:	8b bb       	out	0x1b, r24	; 27
     27c:	81 e0       	ldi	r24, 0x01	; 1
     27e:	08 95       	ret
     280:	28 b3       	in	r18, 0x18	; 24
     282:	81 e0       	ldi	r24, 0x01	; 1
     284:	90 e0       	ldi	r25, 0x00	; 0
     286:	02 c0       	rjmp	.+4      	; 0x28c <DIO_u8SetPinValue+0x3e>
     288:	88 0f       	add	r24, r24
     28a:	99 1f       	adc	r25, r25
     28c:	6a 95       	dec	r22
     28e:	e2 f7       	brpl	.-8      	; 0x288 <DIO_u8SetPinValue+0x3a>
     290:	82 2b       	or	r24, r18
     292:	88 bb       	out	0x18, r24	; 24
     294:	81 e0       	ldi	r24, 0x01	; 1
     296:	08 95       	ret
     298:	25 b3       	in	r18, 0x15	; 21
     29a:	81 e0       	ldi	r24, 0x01	; 1
     29c:	90 e0       	ldi	r25, 0x00	; 0
     29e:	02 c0       	rjmp	.+4      	; 0x2a4 <DIO_u8SetPinValue+0x56>
     2a0:	88 0f       	add	r24, r24
     2a2:	99 1f       	adc	r25, r25
     2a4:	6a 95       	dec	r22
     2a6:	e2 f7       	brpl	.-8      	; 0x2a0 <DIO_u8SetPinValue+0x52>
     2a8:	82 2b       	or	r24, r18
     2aa:	85 bb       	out	0x15, r24	; 21
     2ac:	81 e0       	ldi	r24, 0x01	; 1
     2ae:	08 95       	ret
     2b0:	22 b3       	in	r18, 0x12	; 18
     2b2:	81 e0       	ldi	r24, 0x01	; 1
     2b4:	90 e0       	ldi	r25, 0x00	; 0
     2b6:	02 c0       	rjmp	.+4      	; 0x2bc <DIO_u8SetPinValue+0x6e>
     2b8:	88 0f       	add	r24, r24
     2ba:	99 1f       	adc	r25, r25
     2bc:	6a 95       	dec	r22
     2be:	e2 f7       	brpl	.-8      	; 0x2b8 <DIO_u8SetPinValue+0x6a>
     2c0:	82 2b       	or	r24, r18
     2c2:	82 bb       	out	0x12, r24	; 18
     2c4:	81 e0       	ldi	r24, 0x01	; 1
     2c6:	08 95       	ret
     2c8:	41 11       	cpse	r20, r1
     2ca:	40 c0       	rjmp	.+128    	; 0x34c <DIO_u8SetPinValue+0xfe>
     2cc:	81 30       	cpi	r24, 0x01	; 1
     2ce:	99 f0       	breq	.+38     	; 0x2f6 <DIO_u8SetPinValue+0xa8>
     2d0:	28 f0       	brcs	.+10     	; 0x2dc <DIO_u8SetPinValue+0x8e>
     2d2:	82 30       	cpi	r24, 0x02	; 2
     2d4:	e9 f0       	breq	.+58     	; 0x310 <DIO_u8SetPinValue+0xc2>
     2d6:	83 30       	cpi	r24, 0x03	; 3
     2d8:	41 f1       	breq	.+80     	; 0x32a <DIO_u8SetPinValue+0xdc>
     2da:	3a c0       	rjmp	.+116    	; 0x350 <DIO_u8SetPinValue+0x102>
     2dc:	2b b3       	in	r18, 0x1b	; 27
     2de:	81 e0       	ldi	r24, 0x01	; 1
     2e0:	90 e0       	ldi	r25, 0x00	; 0
     2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <DIO_u8SetPinValue+0x9a>
     2e4:	88 0f       	add	r24, r24
     2e6:	99 1f       	adc	r25, r25
     2e8:	6a 95       	dec	r22
     2ea:	e2 f7       	brpl	.-8      	; 0x2e4 <DIO_u8SetPinValue+0x96>
     2ec:	80 95       	com	r24
     2ee:	82 23       	and	r24, r18
     2f0:	8b bb       	out	0x1b, r24	; 27
     2f2:	81 e0       	ldi	r24, 0x01	; 1
     2f4:	08 95       	ret
     2f6:	28 b3       	in	r18, 0x18	; 24
     2f8:	81 e0       	ldi	r24, 0x01	; 1
     2fa:	90 e0       	ldi	r25, 0x00	; 0
     2fc:	02 c0       	rjmp	.+4      	; 0x302 <DIO_u8SetPinValue+0xb4>
     2fe:	88 0f       	add	r24, r24
     300:	99 1f       	adc	r25, r25
     302:	6a 95       	dec	r22
     304:	e2 f7       	brpl	.-8      	; 0x2fe <DIO_u8SetPinValue+0xb0>
     306:	80 95       	com	r24
     308:	82 23       	and	r24, r18
     30a:	88 bb       	out	0x18, r24	; 24
     30c:	81 e0       	ldi	r24, 0x01	; 1
     30e:	08 95       	ret
     310:	25 b3       	in	r18, 0x15	; 21
     312:	81 e0       	ldi	r24, 0x01	; 1
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	02 c0       	rjmp	.+4      	; 0x31c <DIO_u8SetPinValue+0xce>
     318:	88 0f       	add	r24, r24
     31a:	99 1f       	adc	r25, r25
     31c:	6a 95       	dec	r22
     31e:	e2 f7       	brpl	.-8      	; 0x318 <DIO_u8SetPinValue+0xca>
     320:	80 95       	com	r24
     322:	82 23       	and	r24, r18
     324:	85 bb       	out	0x15, r24	; 21
     326:	81 e0       	ldi	r24, 0x01	; 1
     328:	08 95       	ret
     32a:	22 b3       	in	r18, 0x12	; 18
     32c:	81 e0       	ldi	r24, 0x01	; 1
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	02 c0       	rjmp	.+4      	; 0x336 <DIO_u8SetPinValue+0xe8>
     332:	88 0f       	add	r24, r24
     334:	99 1f       	adc	r25, r25
     336:	6a 95       	dec	r22
     338:	e2 f7       	brpl	.-8      	; 0x332 <DIO_u8SetPinValue+0xe4>
     33a:	80 95       	com	r24
     33c:	82 23       	and	r24, r18
     33e:	82 bb       	out	0x12, r24	; 18
     340:	81 e0       	ldi	r24, 0x01	; 1
     342:	08 95       	ret
     344:	80 e0       	ldi	r24, 0x00	; 0
     346:	08 95       	ret
     348:	80 e0       	ldi	r24, 0x00	; 0
     34a:	08 95       	ret
     34c:	80 e0       	ldi	r24, 0x00	; 0
     34e:	08 95       	ret
     350:	80 e0       	ldi	r24, 0x00	; 0
     352:	08 95       	ret

00000354 <DIO_u8SetPortDirection>:
{
	
	
	u8 Local_ERR_state=OK;
	
	switch (copy_u8portName)
     354:	81 30       	cpi	r24, 0x01	; 1
     356:	49 f0       	breq	.+18     	; 0x36a <DIO_u8SetPortDirection+0x16>
     358:	28 f0       	brcs	.+10     	; 0x364 <DIO_u8SetPortDirection+0x10>
     35a:	82 30       	cpi	r24, 0x02	; 2
     35c:	49 f0       	breq	.+18     	; 0x370 <DIO_u8SetPortDirection+0x1c>
     35e:	83 30       	cpi	r24, 0x03	; 3
     360:	51 f0       	breq	.+20     	; 0x376 <DIO_u8SetPortDirection+0x22>
     362:	0c c0       	rjmp	.+24     	; 0x37c <DIO_u8SetPortDirection+0x28>
	{
		case DIO_PORTA :  DDRA=copy_u8portDirection;  break;
     364:	6a bb       	out	0x1a, r22	; 26

u8 DIO_u8SetPortDirection (u8 copy_u8portName ,u8 copy_u8portDirection)
{
	
	
	u8 Local_ERR_state=OK;
     366:	81 e0       	ldi	r24, 0x01	; 1
	
	switch (copy_u8portName)
	{
		case DIO_PORTA :  DDRA=copy_u8portDirection;  break;
     368:	08 95       	ret
		case DIO_PORTB :  DDRB=copy_u8portDirection;  break;
     36a:	67 bb       	out	0x17, r22	; 23

u8 DIO_u8SetPortDirection (u8 copy_u8portName ,u8 copy_u8portDirection)
{
	
	
	u8 Local_ERR_state=OK;
     36c:	81 e0       	ldi	r24, 0x01	; 1
	
	switch (copy_u8portName)
	{
		case DIO_PORTA :  DDRA=copy_u8portDirection;  break;
		case DIO_PORTB :  DDRB=copy_u8portDirection;  break;
     36e:	08 95       	ret
		case DIO_PORTC :  DDRC=copy_u8portDirection;  break;
     370:	64 bb       	out	0x14, r22	; 20

u8 DIO_u8SetPortDirection (u8 copy_u8portName ,u8 copy_u8portDirection)
{
	
	
	u8 Local_ERR_state=OK;
     372:	81 e0       	ldi	r24, 0x01	; 1
	
	switch (copy_u8portName)
	{
		case DIO_PORTA :  DDRA=copy_u8portDirection;  break;
		case DIO_PORTB :  DDRB=copy_u8portDirection;  break;
		case DIO_PORTC :  DDRC=copy_u8portDirection;  break;
     374:	08 95       	ret
		case DIO_PORTD :  DDRD=copy_u8portDirection;  break;
     376:	61 bb       	out	0x11, r22	; 17

u8 DIO_u8SetPortDirection (u8 copy_u8portName ,u8 copy_u8portDirection)
{
	
	
	u8 Local_ERR_state=OK;
     378:	81 e0       	ldi	r24, 0x01	; 1
	switch (copy_u8portName)
	{
		case DIO_PORTA :  DDRA=copy_u8portDirection;  break;
		case DIO_PORTB :  DDRB=copy_u8portDirection;  break;
		case DIO_PORTC :  DDRC=copy_u8portDirection;  break;
		case DIO_PORTD :  DDRD=copy_u8portDirection;  break;
     37a:	08 95       	ret
		default   :  Local_ERR_state=NOK;             break;
     37c:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	
	return Local_ERR_state;
}
     37e:	08 95       	ret

00000380 <DIO_u8SetPortValue>:
{
	
	
	u8 Local_ERR_state=OK;
	
	switch (copy_u8portName)
     380:	81 30       	cpi	r24, 0x01	; 1
     382:	49 f0       	breq	.+18     	; 0x396 <DIO_u8SetPortValue+0x16>
     384:	28 f0       	brcs	.+10     	; 0x390 <DIO_u8SetPortValue+0x10>
     386:	82 30       	cpi	r24, 0x02	; 2
     388:	49 f0       	breq	.+18     	; 0x39c <DIO_u8SetPortValue+0x1c>
     38a:	83 30       	cpi	r24, 0x03	; 3
     38c:	51 f0       	breq	.+20     	; 0x3a2 <DIO_u8SetPortValue+0x22>
     38e:	0c c0       	rjmp	.+24     	; 0x3a8 <DIO_u8SetPortValue+0x28>
	{
		case DIO_PORTA :  PORTA=copy_u8portValue;  break;
     390:	6b bb       	out	0x1b, r22	; 27

u8 DIO_u8SetPortValue     (u8 copy_u8portName ,u8 copy_u8portValue)
{
	
	
	u8 Local_ERR_state=OK;
     392:	81 e0       	ldi	r24, 0x01	; 1
	
	switch (copy_u8portName)
	{
		case DIO_PORTA :  PORTA=copy_u8portValue;  break;
     394:	08 95       	ret
		case DIO_PORTB :  PORTB=copy_u8portValue;  break;
     396:	68 bb       	out	0x18, r22	; 24

u8 DIO_u8SetPortValue     (u8 copy_u8portName ,u8 copy_u8portValue)
{
	
	
	u8 Local_ERR_state=OK;
     398:	81 e0       	ldi	r24, 0x01	; 1
	
	switch (copy_u8portName)
	{
		case DIO_PORTA :  PORTA=copy_u8portValue;  break;
		case DIO_PORTB :  PORTB=copy_u8portValue;  break;
     39a:	08 95       	ret
		case DIO_PORTC :  PORTC=copy_u8portValue;  break;
     39c:	65 bb       	out	0x15, r22	; 21

u8 DIO_u8SetPortValue     (u8 copy_u8portName ,u8 copy_u8portValue)
{
	
	
	u8 Local_ERR_state=OK;
     39e:	81 e0       	ldi	r24, 0x01	; 1
	
	switch (copy_u8portName)
	{
		case DIO_PORTA :  PORTA=copy_u8portValue;  break;
		case DIO_PORTB :  PORTB=copy_u8portValue;  break;
		case DIO_PORTC :  PORTC=copy_u8portValue;  break;
     3a0:	08 95       	ret
		case DIO_PORTD :  PORTD=copy_u8portValue;  break;
     3a2:	62 bb       	out	0x12, r22	; 18

u8 DIO_u8SetPortValue     (u8 copy_u8portName ,u8 copy_u8portValue)
{
	
	
	u8 Local_ERR_state=OK;
     3a4:	81 e0       	ldi	r24, 0x01	; 1
	switch (copy_u8portName)
	{
		case DIO_PORTA :  PORTA=copy_u8portValue;  break;
		case DIO_PORTB :  PORTB=copy_u8portValue;  break;
		case DIO_PORTC :  PORTC=copy_u8portValue;  break;
		case DIO_PORTD :  PORTD=copy_u8portValue;  break;
     3a6:	08 95       	ret
		default   :  Local_ERR_state=NOK;             break;
     3a8:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	return Local_ERR_state;
	
}
     3aa:	08 95       	ret

000003ac <GLCD_SelectPage>:
	GLCD_SelectPage(GLCD_PAGE_0);
	gu8_Curr_Page = 0;
}

void GLCD_SelectPage(GLCD_PageSelectType Page) {
	switch (Page) {
     3ac:	81 30       	cpi	r24, 0x01	; 1
     3ae:	89 f0       	breq	.+34     	; 0x3d2 <GLCD_SelectPage+0x26>
     3b0:	28 f0       	brcs	.+10     	; 0x3bc <GLCD_SelectPage+0x10>
     3b2:	82 30       	cpi	r24, 0x02	; 2
     3b4:	c9 f0       	breq	.+50     	; 0x3e8 <GLCD_SelectPage+0x3c>
     3b6:	83 30       	cpi	r24, 0x03	; 3
     3b8:	11 f1       	breq	.+68     	; 0x3fe <GLCD_SelectPage+0x52>
     3ba:	08 95       	ret
		case GLCD_NO_PAGES:
		DIO_u8SetPinValue(GLCD_CTRL_PORT, GLCD_CTRL_CS1, DIO_PIN_LOW);
     3bc:	40 e0       	ldi	r20, 0x00	; 0
     3be:	64 e0       	ldi	r22, 0x04	; 4
     3c0:	81 e0       	ldi	r24, 0x01	; 1
     3c2:	0e 94 27 01 	call	0x24e	; 0x24e <DIO_u8SetPinValue>
		DIO_u8SetPinValue(GLCD_CTRL_PORT, GLCD_CTRL_CS2, DIO_PIN_LOW);
     3c6:	40 e0       	ldi	r20, 0x00	; 0
     3c8:	65 e0       	ldi	r22, 0x05	; 5
     3ca:	81 e0       	ldi	r24, 0x01	; 1
     3cc:	0e 94 27 01 	call	0x24e	; 0x24e <DIO_u8SetPinValue>
		break;
     3d0:	08 95       	ret
		case GLCD_PAGE_0:
		DIO_u8SetPinValue(GLCD_CTRL_PORT, GLCD_CTRL_CS1, DIO_PIN_HIGH);
     3d2:	41 e0       	ldi	r20, 0x01	; 1
     3d4:	64 e0       	ldi	r22, 0x04	; 4
     3d6:	81 e0       	ldi	r24, 0x01	; 1
     3d8:	0e 94 27 01 	call	0x24e	; 0x24e <DIO_u8SetPinValue>
		DIO_u8SetPinValue(GLCD_CTRL_PORT, GLCD_CTRL_CS2, DIO_PIN_LOW);
     3dc:	40 e0       	ldi	r20, 0x00	; 0
     3de:	65 e0       	ldi	r22, 0x05	; 5
     3e0:	81 e0       	ldi	r24, 0x01	; 1
     3e2:	0e 94 27 01 	call	0x24e	; 0x24e <DIO_u8SetPinValue>
		break;
     3e6:	08 95       	ret
		case GLCD_PAGE_1:
		DIO_u8SetPinValue(GLCD_CTRL_PORT, GLCD_CTRL_CS1, DIO_PIN_LOW);
     3e8:	40 e0       	ldi	r20, 0x00	; 0
     3ea:	64 e0       	ldi	r22, 0x04	; 4
     3ec:	81 e0       	ldi	r24, 0x01	; 1
     3ee:	0e 94 27 01 	call	0x24e	; 0x24e <DIO_u8SetPinValue>
		DIO_u8SetPinValue(GLCD_CTRL_PORT, GLCD_CTRL_CS2, DIO_PIN_HIGH);
     3f2:	41 e0       	ldi	r20, 0x01	; 1
     3f4:	65 e0       	ldi	r22, 0x05	; 5
     3f6:	81 e0       	ldi	r24, 0x01	; 1
     3f8:	0e 94 27 01 	call	0x24e	; 0x24e <DIO_u8SetPinValue>
		break;
     3fc:	08 95       	ret
		case GLCD_BOTH_PAGES:
		DIO_u8SetPinValue(GLCD_CTRL_PORT, GLCD_CTRL_CS1, DIO_PIN_HIGH);
     3fe:	41 e0       	ldi	r20, 0x01	; 1
     400:	64 e0       	ldi	r22, 0x04	; 4
     402:	81 e0       	ldi	r24, 0x01	; 1
     404:	0e 94 27 01 	call	0x24e	; 0x24e <DIO_u8SetPinValue>
		DIO_u8SetPinValue(GLCD_CTRL_PORT, GLCD_CTRL_CS2, DIO_PIN_HIGH);
     408:	41 e0       	ldi	r20, 0x01	; 1
     40a:	65 e0       	ldi	r22, 0x05	; 5
     40c:	81 e0       	ldi	r24, 0x01	; 1
     40e:	0e 94 27 01 	call	0x24e	; 0x24e <DIO_u8SetPinValue>
     412:	08 95       	ret

00000414 <GLCD_SendInstruction>:
		break;
		default: break;
	}
}

void GLCD_SendInstruction(GLCD_CommandType Instruction) {
     414:	cf 93       	push	r28
     416:	c8 2f       	mov	r28, r24
	
	DIO_u8SetPinValue(GLCD_CTRL_PORT, GLCD_CTRL_RS, GLCD_INSTRUCTION_REG);
     418:	40 e0       	ldi	r20, 0x00	; 0
     41a:	62 e0       	ldi	r22, 0x02	; 2
     41c:	81 e0       	ldi	r24, 0x01	; 1
     41e:	0e 94 27 01 	call	0x24e	; 0x24e <DIO_u8SetPinValue>
	
	DIO_u8SetPinValue(GLCD_CTRL_PORT, GLCD_CTRL_RW, GLCD_WRITE_MODE);
     422:	40 e0       	ldi	r20, 0x00	; 0
     424:	61 e0       	ldi	r22, 0x01	; 1
     426:	81 e0       	ldi	r24, 0x01	; 1
     428:	0e 94 27 01 	call	0x24e	; 0x24e <DIO_u8SetPinValue>
	
	DIO_u8SetPortValue(GLCD_DATA_PORT, Instruction);
     42c:	6c 2f       	mov	r22, r28
     42e:	80 e0       	ldi	r24, 0x00	; 0
     430:	0e 94 c0 01 	call	0x380	; 0x380 <DIO_u8SetPortValue>
	
	DIO_u8SetPinValue(GLCD_CTRL_PORT, GLCD_CTRL_EN, DIO_PIN_HIGH);
     434:	41 e0       	ldi	r20, 0x01	; 1
     436:	60 e0       	ldi	r22, 0x00	; 0
     438:	81 e0       	ldi	r24, 0x01	; 1
     43a:	0e 94 27 01 	call	0x24e	; 0x24e <DIO_u8SetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     43e:	8a e1       	ldi	r24, 0x1A	; 26
     440:	8a 95       	dec	r24
     442:	f1 f7       	brne	.-4      	; 0x440 <GLCD_SendInstruction+0x2c>
     444:	00 c0       	rjmp	.+0      	; 0x446 <GLCD_SendInstruction+0x32>
	#if GLCD_USE_TIMERS_FOR_DELAY == 1
	GPT_Delay_us(&gaStrGPT_Config[0], 5);
	#else
	_delay_us(5);
	#endif
	DIO_u8SetPinValue(GLCD_CTRL_PORT, GLCD_CTRL_EN, DIO_PIN_LOW);
     446:	40 e0       	ldi	r20, 0x00	; 0
     448:	60 e0       	ldi	r22, 0x00	; 0
     44a:	81 e0       	ldi	r24, 0x01	; 1
     44c:	0e 94 27 01 	call	0x24e	; 0x24e <DIO_u8SetPinValue>
}
     450:	cf 91       	pop	r28
     452:	08 95       	ret

00000454 <GLCD_Init>:
void GLCD_Init(void) {
	#if GLCD_USE_TIMERS_FOR_DELAY == 1
	GPT_Init(gaStrGPT_Config);
	#endif
	
	DIO_u8SetPinDirection(GLCD_CTRL_PORT, GLCD_CTRL_EN, DIO_PIN_OUTPUT);
     454:	41 e0       	ldi	r20, 0x01	; 1
     456:	60 e0       	ldi	r22, 0x00	; 0
     458:	81 e0       	ldi	r24, 0x01	; 1
     45a:	0e 94 a4 00 	call	0x148	; 0x148 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(GLCD_CTRL_PORT, GLCD_CTRL_RS, DIO_PIN_OUTPUT);
     45e:	41 e0       	ldi	r20, 0x01	; 1
     460:	62 e0       	ldi	r22, 0x02	; 2
     462:	81 e0       	ldi	r24, 0x01	; 1
     464:	0e 94 a4 00 	call	0x148	; 0x148 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(GLCD_CTRL_PORT, GLCD_CTRL_RW, DIO_PIN_OUTPUT);
     468:	41 e0       	ldi	r20, 0x01	; 1
     46a:	61 e0       	ldi	r22, 0x01	; 1
     46c:	81 e0       	ldi	r24, 0x01	; 1
     46e:	0e 94 a4 00 	call	0x148	; 0x148 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(GLCD_CTRL_PORT, GLCD_CTRL_RST, DIO_PIN_OUTPUT);
     472:	41 e0       	ldi	r20, 0x01	; 1
     474:	66 e0       	ldi	r22, 0x06	; 6
     476:	81 e0       	ldi	r24, 0x01	; 1
     478:	0e 94 a4 00 	call	0x148	; 0x148 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(GLCD_CTRL_PORT, GLCD_CTRL_CS1, DIO_PIN_OUTPUT);
     47c:	41 e0       	ldi	r20, 0x01	; 1
     47e:	64 e0       	ldi	r22, 0x04	; 4
     480:	81 e0       	ldi	r24, 0x01	; 1
     482:	0e 94 a4 00 	call	0x148	; 0x148 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(GLCD_CTRL_PORT, GLCD_CTRL_CS2, DIO_PIN_OUTPUT);
     486:	41 e0       	ldi	r20, 0x01	; 1
     488:	65 e0       	ldi	r22, 0x05	; 5
     48a:	81 e0       	ldi	r24, 0x01	; 1
     48c:	0e 94 a4 00 	call	0x148	; 0x148 <DIO_u8SetPinDirection>

	DIO_u8SetPortDirection(GLCD_DATA_PORT, DIO_PORT_OUTPUT);
     490:	6f ef       	ldi	r22, 0xFF	; 255
     492:	80 e0       	ldi	r24, 0x00	; 0
     494:	0e 94 aa 01 	call	0x354	; 0x354 <DIO_u8SetPortDirection>
	
	DIO_u8SetPinValue(GLCD_CTRL_PORT, GLCD_CTRL_RST, DIO_PIN_HIGH);
     498:	41 e0       	ldi	r20, 0x01	; 1
     49a:	66 e0       	ldi	r22, 0x06	; 6
     49c:	81 e0       	ldi	r24, 0x01	; 1
     49e:	0e 94 27 01 	call	0x24e	; 0x24e <DIO_u8SetPinValue>
	
	GLCD_SelectPage(GLCD_BOTH_PAGES);
     4a2:	83 e0       	ldi	r24, 0x03	; 3
     4a4:	0e 94 d6 01 	call	0x3ac	; 0x3ac <GLCD_SelectPage>
	GLCD_SendInstruction(GLCD_DISPLAY_OFF);
     4a8:	8e e3       	ldi	r24, 0x3E	; 62
     4aa:	0e 94 0a 02 	call	0x414	; 0x414 <GLCD_SendInstruction>
	GLCD_SendInstruction(GLCD_SET_X_ADDRESS_PREFIX + 0); 
     4ae:	88 eb       	ldi	r24, 0xB8	; 184
     4b0:	0e 94 0a 02 	call	0x414	; 0x414 <GLCD_SendInstruction>
	gu8_Curr_X_Address = 0;
     4b4:	10 92 ac 00 	sts	0x00AC, r1	; 0x8000ac <gu8_Curr_X_Address>
	GLCD_SendInstruction(GLCD_SET_Y_ADDRESS_PREFIX + 0);  
     4b8:	80 e4       	ldi	r24, 0x40	; 64
     4ba:	0e 94 0a 02 	call	0x414	; 0x414 <GLCD_SendInstruction>
	gu8_Curr_Y_Address = 0;
     4be:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <gu8_Curr_Y_Address>
	GLCD_SendInstruction(GLCD_SET_Z_ADDRESS_PREFIX + 0);  
     4c2:	80 ec       	ldi	r24, 0xC0	; 192
     4c4:	0e 94 0a 02 	call	0x414	; 0x414 <GLCD_SendInstruction>
	GLCD_SendInstruction(GLCD_DISPLAY_ON);
     4c8:	8f e3       	ldi	r24, 0x3F	; 63
     4ca:	0e 94 0a 02 	call	0x414	; 0x414 <GLCD_SendInstruction>
	GLCD_SelectPage(GLCD_PAGE_0);
     4ce:	81 e0       	ldi	r24, 0x01	; 1
     4d0:	0e 94 d6 01 	call	0x3ac	; 0x3ac <GLCD_SelectPage>
	gu8_Curr_Page = 0;
     4d4:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <__data_end>
     4d8:	08 95       	ret

000004da <GLCD_SendData>:
	_delay_us(5);
	#endif
	DIO_u8SetPinValue(GLCD_CTRL_PORT, GLCD_CTRL_EN, DIO_PIN_LOW);
}

void GLCD_SendData(u8 Data) {
     4da:	cf 93       	push	r28
     4dc:	c8 2f       	mov	r28, r24
	
	DIO_u8SetPinValue(GLCD_CTRL_PORT, GLCD_CTRL_RS, GLCD_DATA_REG);
     4de:	41 e0       	ldi	r20, 0x01	; 1
     4e0:	62 e0       	ldi	r22, 0x02	; 2
     4e2:	81 e0       	ldi	r24, 0x01	; 1
     4e4:	0e 94 27 01 	call	0x24e	; 0x24e <DIO_u8SetPinValue>
	
	DIO_u8SetPinValue(GLCD_CTRL_PORT, GLCD_CTRL_RW, GLCD_WRITE_MODE);
     4e8:	40 e0       	ldi	r20, 0x00	; 0
     4ea:	61 e0       	ldi	r22, 0x01	; 1
     4ec:	81 e0       	ldi	r24, 0x01	; 1
     4ee:	0e 94 27 01 	call	0x24e	; 0x24e <DIO_u8SetPinValue>
	
	DIO_u8SetPortValue(GLCD_DATA_PORT, Data);
     4f2:	6c 2f       	mov	r22, r28
     4f4:	80 e0       	ldi	r24, 0x00	; 0
     4f6:	0e 94 c0 01 	call	0x380	; 0x380 <DIO_u8SetPortValue>
	
	DIO_u8SetPinValue(GLCD_CTRL_PORT, GLCD_CTRL_EN, DIO_PIN_HIGH);
     4fa:	41 e0       	ldi	r20, 0x01	; 1
     4fc:	60 e0       	ldi	r22, 0x00	; 0
     4fe:	81 e0       	ldi	r24, 0x01	; 1
     500:	0e 94 27 01 	call	0x24e	; 0x24e <DIO_u8SetPinValue>
     504:	8a e1       	ldi	r24, 0x1A	; 26
     506:	8a 95       	dec	r24
     508:	f1 f7       	brne	.-4      	; 0x506 <GLCD_SendData+0x2c>
     50a:	00 c0       	rjmp	.+0      	; 0x50c <GLCD_SendData+0x32>
	GPT_Delay_us(&gaStrGPT_Config[0], 5);
	#else
	_delay_us(5);
	#endif
	
	DIO_u8SetPinValue(GLCD_CTRL_PORT, GLCD_CTRL_EN, DIO_PIN_LOW);
     50c:	40 e0       	ldi	r20, 0x00	; 0
     50e:	60 e0       	ldi	r22, 0x00	; 0
     510:	81 e0       	ldi	r24, 0x01	; 1
     512:	0e 94 27 01 	call	0x24e	; 0x24e <DIO_u8SetPinValue>
}
     516:	cf 91       	pop	r28
     518:	08 95       	ret

0000051a <GLCD_Reset>:

void GLCD_Reset(void) {
	
	DIO_u8SetPinValue(GLCD_CTRL_PORT, GLCD_CTRL_RST, DIO_PIN_LOW);
     51a:	40 e0       	ldi	r20, 0x00	; 0
     51c:	66 e0       	ldi	r22, 0x06	; 6
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	0e 94 27 01 	call	0x24e	; 0x24e <DIO_u8SetPinValue>
     524:	85 e3       	ldi	r24, 0x35	; 53
     526:	8a 95       	dec	r24
     528:	f1 f7       	brne	.-4      	; 0x526 <GLCD_Reset+0xc>
     52a:	00 00       	nop
	GPT_Delay_us(&gaStrGPT_Config[0], 10);
	#else
	_delay_us(10);
	#endif
	
	DIO_u8SetPinValue(GLCD_CTRL_PORT, GLCD_CTRL_RST, DIO_PIN_HIGH);
     52c:	41 e0       	ldi	r20, 0x01	; 1
     52e:	66 e0       	ldi	r22, 0x06	; 6
     530:	81 e0       	ldi	r24, 0x01	; 1
     532:	0e 94 27 01 	call	0x24e	; 0x24e <DIO_u8SetPinValue>
     536:	08 95       	ret

00000538 <GLCD_DisplaySpecialPattern>:
}

void GLCD_DisplaySpecialPattern(u64 Pattern) {
     538:	9f 92       	push	r9
     53a:	af 92       	push	r10
     53c:	bf 92       	push	r11
     53e:	cf 92       	push	r12
     540:	df 92       	push	r13
     542:	ef 92       	push	r14
     544:	ff 92       	push	r15
     546:	0f 93       	push	r16
     548:	1f 93       	push	r17
     54a:	cf 93       	push	r28
     54c:	df 93       	push	r29
     54e:	92 2e       	mov	r9, r18
     550:	a3 2e       	mov	r10, r19
     552:	b4 2e       	mov	r11, r20
     554:	c5 2e       	mov	r12, r21
     556:	d6 2e       	mov	r13, r22
     558:	e7 2e       	mov	r14, r23
     55a:	f8 2e       	mov	r15, r24
     55c:	d9 2f       	mov	r29, r25
	for(u8 i = 0; i < 5; i++) {
     55e:	c0 e0       	ldi	r28, 0x00	; 0
     560:	30 c0       	rjmp	.+96     	; 0x5c2 <GLCD_DisplaySpecialPattern+0x8a>
		GLCD_SendInstruction(GLCD_SET_X_ADDRESS_PREFIX + gu8_Curr_X_Address);
     562:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <gu8_Curr_X_Address>
     566:	88 54       	subi	r24, 0x48	; 72
     568:	0e 94 0a 02 	call	0x414	; 0x414 <GLCD_SendInstruction>
		GLCD_SendInstruction(GLCD_SET_Y_ADDRESS_PREFIX + gu8_Curr_Y_Address);
     56c:	80 91 ab 00 	lds	r24, 0x00AB	; 0x8000ab <gu8_Curr_Y_Address>
     570:	80 5c       	subi	r24, 0xC0	; 192
     572:	0e 94 0a 02 	call	0x414	; 0x414 <GLCD_SendInstruction>
		GLCD_SendData((Pattern>>(i*8U)) & 0x00000000FFUL);
     576:	0c 2f       	mov	r16, r28
     578:	10 e0       	ldi	r17, 0x00	; 0
     57a:	00 0f       	add	r16, r16
     57c:	11 1f       	adc	r17, r17
     57e:	00 0f       	add	r16, r16
     580:	11 1f       	adc	r17, r17
     582:	00 0f       	add	r16, r16
     584:	11 1f       	adc	r17, r17
     586:	29 2d       	mov	r18, r9
     588:	3a 2d       	mov	r19, r10
     58a:	4b 2d       	mov	r20, r11
     58c:	5c 2d       	mov	r21, r12
     58e:	6d 2d       	mov	r22, r13
     590:	7e 2d       	mov	r23, r14
     592:	8f 2d       	mov	r24, r15
     594:	9d 2f       	mov	r25, r29
     596:	0e 94 b2 0c 	call	0x1964	; 0x1964 <__lshrdi3>
     59a:	82 2f       	mov	r24, r18
     59c:	0e 94 6d 02 	call	0x4da	; 0x4da <GLCD_SendData>
		gu8_Curr_Y_Address++;
     5a0:	80 91 ab 00 	lds	r24, 0x00AB	; 0x8000ab <gu8_Curr_Y_Address>
     5a4:	8f 5f       	subi	r24, 0xFF	; 255
     5a6:	80 93 ab 00 	sts	0x00AB, r24	; 0x8000ab <gu8_Curr_Y_Address>
		if (gu8_Curr_Y_Address >= GLCD_MAX_PAGE_PIXEL_WIDTH && gu8_Curr_Page == 0) {
     5aa:	80 34       	cpi	r24, 0x40	; 64
     5ac:	48 f0       	brcs	.+18     	; 0x5c0 <GLCD_DisplaySpecialPattern+0x88>
     5ae:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__data_end>
     5b2:	81 11       	cpse	r24, r1
     5b4:	05 c0       	rjmp	.+10     	; 0x5c0 <GLCD_DisplaySpecialPattern+0x88>
			GLCD_SelectPage(GLCD_PAGE_1);
     5b6:	82 e0       	ldi	r24, 0x02	; 2
     5b8:	0e 94 d6 01 	call	0x3ac	; 0x3ac <GLCD_SelectPage>
			gu8_Curr_Y_Address = 0;
     5bc:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <gu8_Curr_Y_Address>
	
	DIO_u8SetPinValue(GLCD_CTRL_PORT, GLCD_CTRL_RST, DIO_PIN_HIGH);
}

void GLCD_DisplaySpecialPattern(u64 Pattern) {
	for(u8 i = 0; i < 5; i++) {
     5c0:	cf 5f       	subi	r28, 0xFF	; 255
     5c2:	c5 30       	cpi	r28, 0x05	; 5
     5c4:	70 f2       	brcs	.-100    	; 0x562 <GLCD_DisplaySpecialPattern+0x2a>
		if (gu8_Curr_Y_Address >= GLCD_MAX_PAGE_PIXEL_WIDTH && gu8_Curr_Page == 0) {
			GLCD_SelectPage(GLCD_PAGE_1);
			gu8_Curr_Y_Address = 0;
		}
	}
}
     5c6:	df 91       	pop	r29
     5c8:	cf 91       	pop	r28
     5ca:	1f 91       	pop	r17
     5cc:	0f 91       	pop	r16
     5ce:	ff 90       	pop	r15
     5d0:	ef 90       	pop	r14
     5d2:	df 90       	pop	r13
     5d4:	cf 90       	pop	r12
     5d6:	bf 90       	pop	r11
     5d8:	af 90       	pop	r10
     5da:	9f 90       	pop	r9
     5dc:	08 95       	ret

000005de <GLCD_DisplayCharacter>:

void GLCD_DisplayCharacter(u8 Data) {
     5de:	e8 2f       	mov	r30, r24
	if ((gu8_Curr_Page == 0) | (gu8_Curr_Y_Address < GLCD_MAX_PAGE_PIXEL_WIDTH - 7U)) {
     5e0:	91 e0       	ldi	r25, 0x01	; 1
     5e2:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__data_end>
     5e6:	81 11       	cpse	r24, r1
     5e8:	90 e0       	ldi	r25, 0x00	; 0
     5ea:	81 e0       	ldi	r24, 0x01	; 1
     5ec:	20 91 ab 00 	lds	r18, 0x00AB	; 0x8000ab <gu8_Curr_Y_Address>
     5f0:	29 33       	cpi	r18, 0x39	; 57
     5f2:	08 f0       	brcs	.+2      	; 0x5f6 <GLCD_DisplayCharacter+0x18>
     5f4:	80 e0       	ldi	r24, 0x00	; 0
     5f6:	89 2b       	or	r24, r25
     5f8:	09 f4       	brne	.+2      	; 0x5fc <GLCD_DisplayCharacter+0x1e>
     5fa:	88 c1       	rjmp	.+784    	; 0x90c <__stack+0xad>
		
		switch (Data) {
     5fc:	8e 2f       	mov	r24, r30
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	fc 01       	movw	r30, r24
     602:	b0 97       	sbiw	r30, 0x20	; 32
     604:	eb 35       	cpi	r30, 0x5B	; 91
     606:	f1 05       	cpc	r31, r1
     608:	08 f0       	brcs	.+2      	; 0x60c <GLCD_DisplayCharacter+0x2e>
     60a:	63 c1       	rjmp	.+710    	; 0x8d2 <__stack+0x73>
     60c:	e6 5d       	subi	r30, 0xD6	; 214
     60e:	ff 4f       	sbci	r31, 0xFF	; 255
     610:	0c 94 9f 0c 	jmp	0x193e	; 0x193e <__tablejump2__>
			case 'A': case 'a': GLCD_DisplaySpecialPattern(GLCD_CHAR_A); break;
     614:	2c e7       	ldi	r18, 0x7C	; 124
     616:	32 e1       	ldi	r19, 0x12	; 18
     618:	41 e1       	ldi	r20, 0x11	; 17
     61a:	52 e1       	ldi	r21, 0x12	; 18
     61c:	6c e7       	ldi	r22, 0x7C	; 124
     61e:	70 e0       	ldi	r23, 0x00	; 0
     620:	80 e0       	ldi	r24, 0x00	; 0
     622:	90 e0       	ldi	r25, 0x00	; 0
     624:	0e 94 9c 02 	call	0x538	; 0x538 <GLCD_DisplaySpecialPattern>
     628:	54 c1       	rjmp	.+680    	; 0x8d2 <__stack+0x73>
			case 'F': case 'f': GLCD_DisplaySpecialPattern(GLCD_CHAR_F); break;
     62a:	2f e7       	ldi	r18, 0x7F	; 127
     62c:	39 e0       	ldi	r19, 0x09	; 9
     62e:	49 e0       	ldi	r20, 0x09	; 9
     630:	59 e0       	ldi	r21, 0x09	; 9
     632:	61 e0       	ldi	r22, 0x01	; 1
     634:	70 e0       	ldi	r23, 0x00	; 0
     636:	80 e0       	ldi	r24, 0x00	; 0
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	0e 94 9c 02 	call	0x538	; 0x538 <GLCD_DisplaySpecialPattern>
     63e:	49 c1       	rjmp	.+658    	; 0x8d2 <__stack+0x73>
			case 'R': case 'r': GLCD_DisplaySpecialPattern(GLCD_CHAR_R); break;
     640:	2f e7       	ldi	r18, 0x7F	; 127
     642:	39 e0       	ldi	r19, 0x09	; 9
     644:	49 e1       	ldi	r20, 0x19	; 25
     646:	59 e2       	ldi	r21, 0x29	; 41
     648:	6f e4       	ldi	r22, 0x4F	; 79
     64a:	70 e0       	ldi	r23, 0x00	; 0
     64c:	80 e0       	ldi	r24, 0x00	; 0
     64e:	90 e0       	ldi	r25, 0x00	; 0
     650:	0e 94 9c 02 	call	0x538	; 0x538 <GLCD_DisplaySpecialPattern>
     654:	3e c1       	rjmp	.+636    	; 0x8d2 <__stack+0x73>
			case 'E': case 'e': GLCD_DisplaySpecialPattern(GLCD_CHAR_E); break;
     656:	2f e7       	ldi	r18, 0x7F	; 127
     658:	39 e4       	ldi	r19, 0x49	; 73
     65a:	49 e4       	ldi	r20, 0x49	; 73
     65c:	59 e4       	ldi	r21, 0x49	; 73
     65e:	61 e4       	ldi	r22, 0x41	; 65
     660:	70 e0       	ldi	r23, 0x00	; 0
     662:	80 e0       	ldi	r24, 0x00	; 0
     664:	90 e0       	ldi	r25, 0x00	; 0
     666:	0e 94 9c 02 	call	0x538	; 0x538 <GLCD_DisplaySpecialPattern>
     66a:	33 c1       	rjmp	.+614    	; 0x8d2 <__stack+0x73>
			case 'Q': case 'q': GLCD_DisplaySpecialPattern(GLCD_CHAR_Q); break;
     66c:	2e e1       	ldi	r18, 0x1E	; 30
     66e:	31 e2       	ldi	r19, 0x21	; 33
     670:	41 e3       	ldi	r20, 0x31	; 49
     672:	5e e3       	ldi	r21, 0x3E	; 62
     674:	60 e4       	ldi	r22, 0x40	; 64
     676:	70 e0       	ldi	r23, 0x00	; 0
     678:	80 e0       	ldi	r24, 0x00	; 0
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	0e 94 9c 02 	call	0x538	; 0x538 <GLCD_DisplaySpecialPattern>
     680:	28 c1       	rjmp	.+592    	; 0x8d2 <__stack+0x73>
			case 'U': case 'u': GLCD_DisplaySpecialPattern(GLCD_CHAR_U); break;
     682:	2f e3       	ldi	r18, 0x3F	; 63
     684:	30 e4       	ldi	r19, 0x40	; 64
     686:	40 e4       	ldi	r20, 0x40	; 64
     688:	50 e4       	ldi	r21, 0x40	; 64
     68a:	6f e3       	ldi	r22, 0x3F	; 63
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	80 e0       	ldi	r24, 0x00	; 0
     690:	90 e0       	ldi	r25, 0x00	; 0
     692:	0e 94 9c 02 	call	0x538	; 0x538 <GLCD_DisplaySpecialPattern>
     696:	1d c1       	rjmp	.+570    	; 0x8d2 <__stack+0x73>
			case 'N': case 'n': GLCD_DisplaySpecialPattern(GLCD_CHAR_N); break;
     698:	2f e7       	ldi	r18, 0x7F	; 127
     69a:	32 e0       	ldi	r19, 0x02	; 2
     69c:	4c e1       	ldi	r20, 0x1C	; 28
     69e:	50 e2       	ldi	r21, 0x20	; 32
     6a0:	6f e7       	ldi	r22, 0x7F	; 127
     6a2:	70 e0       	ldi	r23, 0x00	; 0
     6a4:	80 e0       	ldi	r24, 0x00	; 0
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	0e 94 9c 02 	call	0x538	; 0x538 <GLCD_DisplaySpecialPattern>
     6ac:	12 c1       	rjmp	.+548    	; 0x8d2 <__stack+0x73>
			case 'C': case 'c': GLCD_DisplaySpecialPattern(GLCD_CHAR_C); break;
     6ae:	2e e3       	ldi	r18, 0x3E	; 62
     6b0:	31 e4       	ldi	r19, 0x41	; 65
     6b2:	41 e4       	ldi	r20, 0x41	; 65
     6b4:	51 e4       	ldi	r21, 0x41	; 65
     6b6:	61 e4       	ldi	r22, 0x41	; 65
     6b8:	70 e0       	ldi	r23, 0x00	; 0
     6ba:	80 e0       	ldi	r24, 0x00	; 0
     6bc:	90 e0       	ldi	r25, 0x00	; 0
     6be:	0e 94 9c 02 	call	0x538	; 0x538 <GLCD_DisplaySpecialPattern>
     6c2:	07 c1       	rjmp	.+526    	; 0x8d2 <__stack+0x73>
			case 'Y': case 'y': GLCD_DisplaySpecialPattern(GLCD_CHAR_Y); break;
     6c4:	23 e0       	ldi	r18, 0x03	; 3
     6c6:	3c e0       	ldi	r19, 0x0C	; 12
     6c8:	40 e7       	ldi	r20, 0x70	; 112
     6ca:	5c e0       	ldi	r21, 0x0C	; 12
     6cc:	63 e0       	ldi	r22, 0x03	; 3
     6ce:	70 e0       	ldi	r23, 0x00	; 0
     6d0:	80 e0       	ldi	r24, 0x00	; 0
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	0e 94 9c 02 	call	0x538	; 0x538 <GLCD_DisplaySpecialPattern>
     6d8:	fc c0       	rjmp	.+504    	; 0x8d2 <__stack+0x73>
			case 'D': case 'd': GLCD_DisplaySpecialPattern(GLCD_CHAR_D); break;
     6da:	2f e7       	ldi	r18, 0x7F	; 127
     6dc:	31 e4       	ldi	r19, 0x41	; 65
     6de:	41 e4       	ldi	r20, 0x41	; 65
     6e0:	5e e3       	ldi	r21, 0x3E	; 62
     6e2:	60 e0       	ldi	r22, 0x00	; 0
     6e4:	70 e0       	ldi	r23, 0x00	; 0
     6e6:	80 e0       	ldi	r24, 0x00	; 0
     6e8:	90 e0       	ldi	r25, 0x00	; 0
     6ea:	0e 94 9c 02 	call	0x538	; 0x538 <GLCD_DisplaySpecialPattern>
     6ee:	f1 c0       	rjmp	.+482    	; 0x8d2 <__stack+0x73>
			case 'T': case 't': GLCD_DisplaySpecialPattern(GLCD_CHAR_T); break;
     6f0:	21 e0       	ldi	r18, 0x01	; 1
     6f2:	31 e0       	ldi	r19, 0x01	; 1
     6f4:	4f e7       	ldi	r20, 0x7F	; 127
     6f6:	51 e0       	ldi	r21, 0x01	; 1
     6f8:	61 e0       	ldi	r22, 0x01	; 1
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	80 e0       	ldi	r24, 0x00	; 0
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	0e 94 9c 02 	call	0x538	; 0x538 <GLCD_DisplaySpecialPattern>
     704:	e6 c0       	rjmp	.+460    	; 0x8d2 <__stack+0x73>
			case 'K': case 'k': GLCD_DisplaySpecialPattern(GLCD_CHAR_K); break;
     706:	2f e7       	ldi	r18, 0x7F	; 127
     708:	38 e0       	ldi	r19, 0x08	; 8
     70a:	44 e1       	ldi	r20, 0x14	; 20
     70c:	52 e2       	ldi	r21, 0x22	; 34
     70e:	61 e4       	ldi	r22, 0x41	; 65
     710:	70 e0       	ldi	r23, 0x00	; 0
     712:	80 e0       	ldi	r24, 0x00	; 0
     714:	90 e0       	ldi	r25, 0x00	; 0
     716:	0e 94 9c 02 	call	0x538	; 0x538 <GLCD_DisplaySpecialPattern>
     71a:	db c0       	rjmp	.+438    	; 0x8d2 <__stack+0x73>
			case 'H': case 'h': GLCD_DisplaySpecialPattern(GLCD_CHAR_H); break;
     71c:	2f e7       	ldi	r18, 0x7F	; 127
     71e:	38 e0       	ldi	r19, 0x08	; 8
     720:	48 e0       	ldi	r20, 0x08	; 8
     722:	58 e0       	ldi	r21, 0x08	; 8
     724:	6f e7       	ldi	r22, 0x7F	; 127
     726:	70 e0       	ldi	r23, 0x00	; 0
     728:	80 e0       	ldi	r24, 0x00	; 0
     72a:	90 e0       	ldi	r25, 0x00	; 0
     72c:	0e 94 9c 02 	call	0x538	; 0x538 <GLCD_DisplaySpecialPattern>
     730:	d0 c0       	rjmp	.+416    	; 0x8d2 <__stack+0x73>
			case 'Z': case 'z': GLCD_DisplaySpecialPattern(GLCD_CHAR_Z); break;
     732:	21 e6       	ldi	r18, 0x61	; 97
     734:	31 e5       	ldi	r19, 0x51	; 81
     736:	49 e4       	ldi	r20, 0x49	; 73
     738:	55 e4       	ldi	r21, 0x45	; 69
     73a:	63 e4       	ldi	r22, 0x43	; 67
     73c:	70 e0       	ldi	r23, 0x00	; 0
     73e:	80 e0       	ldi	r24, 0x00	; 0
     740:	90 e0       	ldi	r25, 0x00	; 0
     742:	0e 94 9c 02 	call	0x538	; 0x538 <GLCD_DisplaySpecialPattern>
     746:	c5 c0       	rjmp	.+394    	; 0x8d2 <__stack+0x73>
			case 'M': case 'm': GLCD_DisplaySpecialPattern(GLCD_CHAR_M); break;
     748:	2f e7       	ldi	r18, 0x7F	; 127
     74a:	32 e0       	ldi	r19, 0x02	; 2
     74c:	4c e0       	ldi	r20, 0x0C	; 12
     74e:	52 e0       	ldi	r21, 0x02	; 2
     750:	6f e7       	ldi	r22, 0x7F	; 127
     752:	70 e0       	ldi	r23, 0x00	; 0
     754:	80 e0       	ldi	r24, 0x00	; 0
     756:	90 e0       	ldi	r25, 0x00	; 0
     758:	0e 94 9c 02 	call	0x538	; 0x538 <GLCD_DisplaySpecialPattern>
     75c:	ba c0       	rjmp	.+372    	; 0x8d2 <__stack+0x73>
			case 'S': case 's': GLCD_DisplaySpecialPattern(GLCD_CHAR_S); break;
     75e:	2f e4       	ldi	r18, 0x4F	; 79
     760:	39 e4       	ldi	r19, 0x49	; 73
     762:	49 e4       	ldi	r20, 0x49	; 73
     764:	59 e4       	ldi	r21, 0x49	; 73
     766:	69 ef       	ldi	r22, 0xF9	; 249
     768:	70 e0       	ldi	r23, 0x00	; 0
     76a:	80 e0       	ldi	r24, 0x00	; 0
     76c:	90 e0       	ldi	r25, 0x00	; 0
     76e:	0e 94 9c 02 	call	0x538	; 0x538 <GLCD_DisplaySpecialPattern>
     772:	af c0       	rjmp	.+350    	; 0x8d2 <__stack+0x73>
			case 'I': case 'i': GLCD_DisplaySpecialPattern(GLCD_CHAR_I); break;
     774:	21 e4       	ldi	r18, 0x41	; 65
     776:	31 e4       	ldi	r19, 0x41	; 65
     778:	4f e7       	ldi	r20, 0x7F	; 127
     77a:	51 e4       	ldi	r21, 0x41	; 65
     77c:	61 e4       	ldi	r22, 0x41	; 65
     77e:	70 e0       	ldi	r23, 0x00	; 0
     780:	80 e0       	ldi	r24, 0x00	; 0
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	0e 94 9c 02 	call	0x538	; 0x538 <GLCD_DisplaySpecialPattern>
     788:	a4 c0       	rjmp	.+328    	; 0x8d2 <__stack+0x73>
			case '%': GLCD_DisplaySpecialPattern(GLCD_CHAR_PERCENT); break;
     78a:	23 ec       	ldi	r18, 0xC3	; 195
     78c:	33 e7       	ldi	r19, 0x73	; 115
     78e:	48 e1       	ldi	r20, 0x18	; 24
     790:	5e ec       	ldi	r21, 0xCE	; 206
     792:	63 ec       	ldi	r22, 0xC3	; 195
     794:	70 e0       	ldi	r23, 0x00	; 0
     796:	80 e0       	ldi	r24, 0x00	; 0
     798:	90 e0       	ldi	r25, 0x00	; 0
     79a:	0e 94 9c 02 	call	0x538	; 0x538 <GLCD_DisplaySpecialPattern>
     79e:	99 c0       	rjmp	.+306    	; 0x8d2 <__stack+0x73>
			case '=': GLCD_DisplaySpecialPattern(GLCD_CHAR_EQUAL); break;
     7a0:	24 e2       	ldi	r18, 0x24	; 36
     7a2:	34 e2       	ldi	r19, 0x24	; 36
     7a4:	44 e2       	ldi	r20, 0x24	; 36
     7a6:	54 e2       	ldi	r21, 0x24	; 36
     7a8:	64 e2       	ldi	r22, 0x24	; 36
     7aa:	70 e0       	ldi	r23, 0x00	; 0
     7ac:	80 e0       	ldi	r24, 0x00	; 0
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	0e 94 9c 02 	call	0x538	; 0x538 <GLCD_DisplaySpecialPattern>
     7b4:	8e c0       	rjmp	.+284    	; 0x8d2 <__stack+0x73>
			case '.': GLCD_DisplaySpecialPattern(GLCD_CHAR_POINT); break;
     7b6:	20 e0       	ldi	r18, 0x00	; 0
     7b8:	30 e7       	ldi	r19, 0x70	; 112
     7ba:	40 e7       	ldi	r20, 0x70	; 112
     7bc:	50 e7       	ldi	r21, 0x70	; 112
     7be:	60 e0       	ldi	r22, 0x00	; 0
     7c0:	70 e0       	ldi	r23, 0x00	; 0
     7c2:	80 e0       	ldi	r24, 0x00	; 0
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	0e 94 9c 02 	call	0x538	; 0x538 <GLCD_DisplaySpecialPattern>
     7ca:	83 c0       	rjmp	.+262    	; 0x8d2 <__stack+0x73>
			case ' ': GLCD_DisplaySpecialPattern(GLCD_CHAR_SPACE); break;
     7cc:	20 e0       	ldi	r18, 0x00	; 0
     7ce:	30 e0       	ldi	r19, 0x00	; 0
     7d0:	40 e0       	ldi	r20, 0x00	; 0
     7d2:	50 e0       	ldi	r21, 0x00	; 0
     7d4:	60 e0       	ldi	r22, 0x00	; 0
     7d6:	70 e0       	ldi	r23, 0x00	; 0
     7d8:	80 e0       	ldi	r24, 0x00	; 0
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	0e 94 9c 02 	call	0x538	; 0x538 <GLCD_DisplaySpecialPattern>
     7e0:	78 c0       	rjmp	.+240    	; 0x8d2 <__stack+0x73>
			case '-': GLCD_DisplaySpecialPattern(GLCD_CHAR_NEGATIVE); break;
     7e2:	28 e1       	ldi	r18, 0x18	; 24
     7e4:	38 e1       	ldi	r19, 0x18	; 24
     7e6:	48 e1       	ldi	r20, 0x18	; 24
     7e8:	58 e1       	ldi	r21, 0x18	; 24
     7ea:	68 e1       	ldi	r22, 0x18	; 24
     7ec:	70 e0       	ldi	r23, 0x00	; 0
     7ee:	80 e0       	ldi	r24, 0x00	; 0
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	0e 94 9c 02 	call	0x538	; 0x538 <GLCD_DisplaySpecialPattern>
     7f6:	6d c0       	rjmp	.+218    	; 0x8d2 <__stack+0x73>
			case '0': GLCD_DisplaySpecialPattern(GLCD_CHAR_0); break;
     7f8:	2e e3       	ldi	r18, 0x3E	; 62
     7fa:	31 e5       	ldi	r19, 0x51	; 81
     7fc:	49 e4       	ldi	r20, 0x49	; 73
     7fe:	55 e4       	ldi	r21, 0x45	; 69
     800:	6e e3       	ldi	r22, 0x3E	; 62
     802:	70 e0       	ldi	r23, 0x00	; 0
     804:	80 e0       	ldi	r24, 0x00	; 0
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	0e 94 9c 02 	call	0x538	; 0x538 <GLCD_DisplaySpecialPattern>
     80c:	62 c0       	rjmp	.+196    	; 0x8d2 <__stack+0x73>
			case '1': GLCD_DisplaySpecialPattern(GLCD_CHAR_1); break;
     80e:	24 e4       	ldi	r18, 0x44	; 68
     810:	32 e4       	ldi	r19, 0x42	; 66
     812:	4f e7       	ldi	r20, 0x7F	; 127
     814:	50 e4       	ldi	r21, 0x40	; 64
     816:	60 e4       	ldi	r22, 0x40	; 64
     818:	70 e0       	ldi	r23, 0x00	; 0
     81a:	80 e0       	ldi	r24, 0x00	; 0
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	0e 94 9c 02 	call	0x538	; 0x538 <GLCD_DisplaySpecialPattern>
     822:	57 c0       	rjmp	.+174    	; 0x8d2 <__stack+0x73>
			case '2': GLCD_DisplaySpecialPattern(GLCD_CHAR_2); break;
     824:	26 e4       	ldi	r18, 0x46	; 70
     826:	31 e6       	ldi	r19, 0x61	; 97
     828:	41 e5       	ldi	r20, 0x51	; 81
     82a:	5e e4       	ldi	r21, 0x4E	; 78
     82c:	60 e4       	ldi	r22, 0x40	; 64
     82e:	70 e0       	ldi	r23, 0x00	; 0
     830:	80 e0       	ldi	r24, 0x00	; 0
     832:	90 e0       	ldi	r25, 0x00	; 0
     834:	0e 94 9c 02 	call	0x538	; 0x538 <GLCD_DisplaySpecialPattern>
     838:	4c c0       	rjmp	.+152    	; 0x8d2 <__stack+0x73>
			case '3': GLCD_DisplaySpecialPattern(GLCD_CHAR_3); break;
     83a:	21 e4       	ldi	r18, 0x41	; 65
     83c:	39 e4       	ldi	r19, 0x49	; 73
     83e:	49 e4       	ldi	r20, 0x49	; 73
     840:	59 e4       	ldi	r21, 0x49	; 73
     842:	66 e3       	ldi	r22, 0x36	; 54
     844:	70 e0       	ldi	r23, 0x00	; 0
     846:	80 e0       	ldi	r24, 0x00	; 0
     848:	90 e0       	ldi	r25, 0x00	; 0
     84a:	0e 94 9c 02 	call	0x538	; 0x538 <GLCD_DisplaySpecialPattern>
     84e:	41 c0       	rjmp	.+130    	; 0x8d2 <__stack+0x73>
			case '4': GLCD_DisplaySpecialPattern(GLCD_CHAR_4); break;
     850:	28 e1       	ldi	r18, 0x18	; 24
     852:	34 e1       	ldi	r19, 0x14	; 20
     854:	42 e1       	ldi	r20, 0x12	; 18
     856:	5f e7       	ldi	r21, 0x7F	; 127
     858:	60 e1       	ldi	r22, 0x10	; 16
     85a:	70 e0       	ldi	r23, 0x00	; 0
     85c:	80 e0       	ldi	r24, 0x00	; 0
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	0e 94 9c 02 	call	0x538	; 0x538 <GLCD_DisplaySpecialPattern>
     864:	36 c0       	rjmp	.+108    	; 0x8d2 <__stack+0x73>
			case '5': GLCD_DisplaySpecialPattern(GLCD_CHAR_5); break;
     866:	2f e4       	ldi	r18, 0x4F	; 79
     868:	39 e4       	ldi	r19, 0x49	; 73
     86a:	49 e4       	ldi	r20, 0x49	; 73
     86c:	51 e5       	ldi	r21, 0x51	; 81
     86e:	61 e2       	ldi	r22, 0x21	; 33
     870:	70 e0       	ldi	r23, 0x00	; 0
     872:	80 e0       	ldi	r24, 0x00	; 0
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	0e 94 9c 02 	call	0x538	; 0x538 <GLCD_DisplaySpecialPattern>
     87a:	2b c0       	rjmp	.+86     	; 0x8d2 <__stack+0x73>
			case '6': GLCD_DisplaySpecialPattern(GLCD_CHAR_6); break;
     87c:	2c e7       	ldi	r18, 0x7C	; 124
     87e:	3a e4       	ldi	r19, 0x4A	; 74
     880:	49 e4       	ldi	r20, 0x49	; 73
     882:	59 e4       	ldi	r21, 0x49	; 73
     884:	61 e3       	ldi	r22, 0x31	; 49
     886:	70 e0       	ldi	r23, 0x00	; 0
     888:	80 e0       	ldi	r24, 0x00	; 0
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	0e 94 9c 02 	call	0x538	; 0x538 <GLCD_DisplaySpecialPattern>
     890:	20 c0       	rjmp	.+64     	; 0x8d2 <__stack+0x73>
			case '7': GLCD_DisplaySpecialPattern(GLCD_CHAR_7); break;
     892:	21 e0       	ldi	r18, 0x01	; 1
     894:	39 e4       	ldi	r19, 0x49	; 73
     896:	49 e2       	ldi	r20, 0x29	; 41
     898:	59 e1       	ldi	r21, 0x19	; 25
     89a:	6f e0       	ldi	r22, 0x0F	; 15
     89c:	70 e0       	ldi	r23, 0x00	; 0
     89e:	80 e0       	ldi	r24, 0x00	; 0
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	0e 94 9c 02 	call	0x538	; 0x538 <GLCD_DisplaySpecialPattern>
     8a6:	15 c0       	rjmp	.+42     	; 0x8d2 <__stack+0x73>
			case '8': GLCD_DisplaySpecialPattern(GLCD_CHAR_8); break;
     8a8:	27 e7       	ldi	r18, 0x77	; 119
     8aa:	39 e4       	ldi	r19, 0x49	; 73
     8ac:	49 e4       	ldi	r20, 0x49	; 73
     8ae:	59 e4       	ldi	r21, 0x49	; 73
     8b0:	67 e7       	ldi	r22, 0x77	; 119
     8b2:	70 e0       	ldi	r23, 0x00	; 0
     8b4:	80 e0       	ldi	r24, 0x00	; 0
     8b6:	90 e0       	ldi	r25, 0x00	; 0
     8b8:	0e 94 9c 02 	call	0x538	; 0x538 <GLCD_DisplaySpecialPattern>
     8bc:	0a c0       	rjmp	.+20     	; 0x8d2 <__stack+0x73>
			case '9': GLCD_DisplaySpecialPattern(GLCD_CHAR_9); break;
     8be:	2f e4       	ldi	r18, 0x4F	; 79
     8c0:	39 e4       	ldi	r19, 0x49	; 73
     8c2:	49 e4       	ldi	r20, 0x49	; 73
     8c4:	59 e4       	ldi	r21, 0x49	; 73
     8c6:	6f e7       	ldi	r22, 0x7F	; 127
     8c8:	70 e0       	ldi	r23, 0x00	; 0
     8ca:	80 e0       	ldi	r24, 0x00	; 0
     8cc:	90 e0       	ldi	r25, 0x00	; 0
     8ce:	0e 94 9c 02 	call	0x538	; 0x538 <GLCD_DisplaySpecialPattern>
			default: break;
		}
		GLCD_SendInstruction(GLCD_SET_X_ADDRESS_PREFIX + gu8_Curr_X_Address);
     8d2:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <gu8_Curr_X_Address>
     8d6:	88 54       	subi	r24, 0x48	; 72
     8d8:	0e 94 0a 02 	call	0x414	; 0x414 <GLCD_SendInstruction>
		GLCD_SendInstruction(GLCD_SET_Y_ADDRESS_PREFIX + gu8_Curr_Y_Address);
     8dc:	80 91 ab 00 	lds	r24, 0x00AB	; 0x8000ab <gu8_Curr_Y_Address>
     8e0:	80 5c       	subi	r24, 0xC0	; 192
     8e2:	0e 94 0a 02 	call	0x414	; 0x414 <GLCD_SendInstruction>
		GLCD_SendData(0);
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	0e 94 6d 02 	call	0x4da	; 0x4da <GLCD_SendData>
		gu8_Curr_Y_Address++;
     8ec:	80 91 ab 00 	lds	r24, 0x00AB	; 0x8000ab <gu8_Curr_Y_Address>
     8f0:	8f 5f       	subi	r24, 0xFF	; 255
     8f2:	80 93 ab 00 	sts	0x00AB, r24	; 0x8000ab <gu8_Curr_Y_Address>
		if (gu8_Curr_Y_Address >= GLCD_MAX_PAGE_PIXEL_WIDTH && gu8_Curr_Page == 0) {
     8f6:	80 34       	cpi	r24, 0x40	; 64
     8f8:	48 f0       	brcs	.+18     	; 0x90c <__stack+0xad>
     8fa:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__data_end>
     8fe:	81 11       	cpse	r24, r1
     900:	05 c0       	rjmp	.+10     	; 0x90c <__stack+0xad>
			GLCD_SelectPage(GLCD_PAGE_1);
     902:	82 e0       	ldi	r24, 0x02	; 2
     904:	0e 94 d6 01 	call	0x3ac	; 0x3ac <GLCD_SelectPage>
			gu8_Curr_Y_Address = 0;
     908:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <gu8_Curr_Y_Address>
     90c:	08 95       	ret

0000090e <GLCD_DisplayString>:
		}
	}
}

void GLCD_DisplayString(u8* Data_Ptr) {
     90e:	cf 93       	push	r28
     910:	df 93       	push	r29
     912:	ec 01       	movw	r28, r24
	while (*Data_Ptr != '\0') {
     914:	03 c0       	rjmp	.+6      	; 0x91c <GLCD_DisplayString+0xe>
		GLCD_DisplayCharacter(*Data_Ptr);
     916:	0e 94 ef 02 	call	0x5de	; 0x5de <GLCD_DisplayCharacter>
		Data_Ptr++;
     91a:	21 96       	adiw	r28, 0x01	; 1
		}
	}
}

void GLCD_DisplayString(u8* Data_Ptr) {
	while (*Data_Ptr != '\0') {
     91c:	88 81       	ld	r24, Y
     91e:	81 11       	cpse	r24, r1
     920:	fa cf       	rjmp	.-12     	; 0x916 <GLCD_DisplayString+0x8>
		GLCD_DisplayCharacter(*Data_Ptr);
		Data_Ptr++;
	}
}
     922:	df 91       	pop	r29
     924:	cf 91       	pop	r28
     926:	08 95       	ret

00000928 <GLCD_DisplayInteger>:

void GLCD_DisplayInteger(s32 Data) {
     928:	cf 92       	push	r12
     92a:	df 92       	push	r13
     92c:	ef 92       	push	r14
     92e:	ff 92       	push	r15
     930:	0f 93       	push	r16
     932:	1f 93       	push	r17
     934:	cf 93       	push	r28
     936:	df 93       	push	r29
     938:	00 d0       	rcall	.+0      	; 0x93a <GLCD_DisplayInteger+0x12>
     93a:	00 d0       	rcall	.+0      	; 0x93c <GLCD_DisplayInteger+0x14>
     93c:	1f 92       	push	r1
     93e:	cd b7       	in	r28, 0x3d	; 61
     940:	de b7       	in	r29, 0x3e	; 62
     942:	6b 01       	movw	r12, r22
     944:	7c 01       	movw	r14, r24
	if (Data < 0) {
     946:	99 23       	and	r25, r25
     948:	5c f4       	brge	.+22     	; 0x960 <GLCD_DisplayInteger+0x38>
		GLCD_DisplayCharacter('-');
     94a:	8d e2       	ldi	r24, 0x2D	; 45
     94c:	0e 94 ef 02 	call	0x5de	; 0x5de <GLCD_DisplayCharacter>
		Data = -1 * Data;
     950:	f0 94       	com	r15
     952:	e0 94       	com	r14
     954:	d0 94       	com	r13
     956:	c0 94       	com	r12
     958:	c1 1c       	adc	r12, r1
     95a:	d1 1c       	adc	r13, r1
     95c:	e1 1c       	adc	r14, r1
     95e:	f1 1c       	adc	r15, r1
	}
	u8 u8Local_Digit = 0U;
	char str_reversed[5] = "";
     960:	1a 82       	std	Y+2, r1	; 0x02
     962:	19 82       	std	Y+1, r1	; 0x01
     964:	fe 01       	movw	r30, r28
     966:	33 96       	adiw	r30, 0x03	; 3
     968:	83 e0       	ldi	r24, 0x03	; 3
     96a:	df 01       	movw	r26, r30
     96c:	1d 92       	st	X+, r1
     96e:	8a 95       	dec	r24
     970:	e9 f7       	brne	.-6      	; 0x96c <GLCD_DisplayInteger+0x44>
	char* str_ptr = str_reversed;
     972:	8e 01       	movw	r16, r28
     974:	0f 5f       	subi	r16, 0xFF	; 255
     976:	1f 4f       	sbci	r17, 0xFF	; 255
	do {
		u8Local_Digit = Data%10;
     978:	c7 01       	movw	r24, r14
     97a:	b6 01       	movw	r22, r12
     97c:	2a e0       	ldi	r18, 0x0A	; 10
     97e:	30 e0       	ldi	r19, 0x00	; 0
     980:	40 e0       	ldi	r20, 0x00	; 0
     982:	50 e0       	ldi	r21, 0x00	; 0
     984:	0e 94 80 0c 	call	0x1900	; 0x1900 <__divmodsi4>
		*str_ptr = (char)(48 + u8Local_Digit); 
     988:	60 5d       	subi	r22, 0xD0	; 208
     98a:	f8 01       	movw	r30, r16
     98c:	61 93       	st	Z+, r22
     98e:	8f 01       	movw	r16, r30
		Data = Data/10;
     990:	c2 2e       	mov	r12, r18
     992:	d3 2e       	mov	r13, r19
     994:	e4 2e       	mov	r14, r20
     996:	f5 2e       	mov	r15, r21
		str_ptr++;
	} while (Data > 0);
     998:	1c 14       	cp	r1, r12
     99a:	1d 04       	cpc	r1, r13
     99c:	1e 04       	cpc	r1, r14
     99e:	1f 04       	cpc	r1, r15
     9a0:	5c f3       	brlt	.-42     	; 0x978 <GLCD_DisplayInteger+0x50>
	do {
		str_ptr--;
		GLCD_DisplayCharacter(*str_ptr);
     9a2:	d8 01       	movw	r26, r16
     9a4:	8e 91       	ld	r24, -X
     9a6:	8d 01       	movw	r16, r26
     9a8:	0e 94 ef 02 	call	0x5de	; 0x5de <GLCD_DisplayCharacter>
	} while (str_ptr != str_reversed);
     9ac:	ce 01       	movw	r24, r28
     9ae:	01 96       	adiw	r24, 0x01	; 1
     9b0:	80 17       	cp	r24, r16
     9b2:	91 07       	cpc	r25, r17
     9b4:	b1 f7       	brne	.-20     	; 0x9a2 <GLCD_DisplayInteger+0x7a>
}
     9b6:	0f 90       	pop	r0
     9b8:	0f 90       	pop	r0
     9ba:	0f 90       	pop	r0
     9bc:	0f 90       	pop	r0
     9be:	0f 90       	pop	r0
     9c0:	df 91       	pop	r29
     9c2:	cf 91       	pop	r28
     9c4:	1f 91       	pop	r17
     9c6:	0f 91       	pop	r16
     9c8:	ff 90       	pop	r15
     9ca:	ef 90       	pop	r14
     9cc:	df 90       	pop	r13
     9ce:	cf 90       	pop	r12
     9d0:	08 95       	ret

000009d2 <GLCD_DisplayFloatingPoint>:

void GLCD_DisplayFloatingPoint(f32 Data) {
     9d2:	8f 92       	push	r8
     9d4:	9f 92       	push	r9
     9d6:	af 92       	push	r10
     9d8:	bf 92       	push	r11
     9da:	cf 92       	push	r12
     9dc:	df 92       	push	r13
     9de:	ef 92       	push	r14
     9e0:	ff 92       	push	r15
     9e2:	cf 93       	push	r28
     9e4:	df 93       	push	r29
     9e6:	4b 01       	movw	r8, r22
     9e8:	5c 01       	movw	r10, r24
	
	u16 IntegerPart = (u16)Data;
     9ea:	0e 94 46 0b 	call	0x168c	; 0x168c <__fixunssfsi>
	GLCD_DisplayInteger(IntegerPart);
     9ee:	6b 01       	movw	r12, r22
     9f0:	e1 2c       	mov	r14, r1
     9f2:	f1 2c       	mov	r15, r1
     9f4:	c7 01       	movw	r24, r14
     9f6:	b6 01       	movw	r22, r12
     9f8:	0e 94 94 04 	call	0x928	; 0x928 <GLCD_DisplayInteger>
	GLCD_DisplayCharacter('.');
     9fc:	8e e2       	ldi	r24, 0x2E	; 46
     9fe:	0e 94 ef 02 	call	0x5de	; 0x5de <GLCD_DisplayCharacter>
	f32 DecimalPart = (Data - IntegerPart);
     a02:	c7 01       	movw	r24, r14
     a04:	b6 01       	movw	r22, r12
     a06:	0e 94 75 0b 	call	0x16ea	; 0x16ea <__floatunsisf>
     a0a:	9b 01       	movw	r18, r22
     a0c:	ac 01       	movw	r20, r24
     a0e:	c5 01       	movw	r24, r10
     a10:	b4 01       	movw	r22, r8
     a12:	0e 94 67 0a 	call	0x14ce	; 0x14ce <__subsf3>
	u8 Digit = 0;
	for (u8 i = 0; i < 3; i++) {
     a16:	d0 e0       	ldi	r29, 0x00	; 0
     a18:	1c c0       	rjmp	.+56     	; 0xa52 <GLCD_DisplayFloatingPoint+0x80>
		Digit = (u8)(DecimalPart * 10.0);
     a1a:	20 e0       	ldi	r18, 0x00	; 0
     a1c:	30 e0       	ldi	r19, 0x00	; 0
     a1e:	40 e2       	ldi	r20, 0x20	; 32
     a20:	51 e4       	ldi	r21, 0x41	; 65
     a22:	0e 94 03 0c 	call	0x1806	; 0x1806 <__mulsf3>
     a26:	6b 01       	movw	r12, r22
     a28:	7c 01       	movw	r14, r24
     a2a:	0e 94 46 0b 	call	0x168c	; 0x168c <__fixunssfsi>
     a2e:	c6 2f       	mov	r28, r22
		GLCD_DisplayCharacter((char)(48+Digit));
     a30:	80 e3       	ldi	r24, 0x30	; 48
     a32:	8c 0f       	add	r24, r28
     a34:	0e 94 ef 02 	call	0x5de	; 0x5de <GLCD_DisplayCharacter>
		DecimalPart = ((DecimalPart*10.0) - Digit);
     a38:	6c 2f       	mov	r22, r28
     a3a:	70 e0       	ldi	r23, 0x00	; 0
     a3c:	80 e0       	ldi	r24, 0x00	; 0
     a3e:	90 e0       	ldi	r25, 0x00	; 0
     a40:	0e 94 77 0b 	call	0x16ee	; 0x16ee <__floatsisf>
     a44:	9b 01       	movw	r18, r22
     a46:	ac 01       	movw	r20, r24
     a48:	c7 01       	movw	r24, r14
     a4a:	b6 01       	movw	r22, r12
     a4c:	0e 94 67 0a 	call	0x14ce	; 0x14ce <__subsf3>
	u16 IntegerPart = (u16)Data;
	GLCD_DisplayInteger(IntegerPart);
	GLCD_DisplayCharacter('.');
	f32 DecimalPart = (Data - IntegerPart);
	u8 Digit = 0;
	for (u8 i = 0; i < 3; i++) {
     a50:	df 5f       	subi	r29, 0xFF	; 255
     a52:	d3 30       	cpi	r29, 0x03	; 3
     a54:	10 f3       	brcs	.-60     	; 0xa1a <GLCD_DisplayFloatingPoint+0x48>
		Digit = (u8)(DecimalPart * 10.0);
		GLCD_DisplayCharacter((char)(48+Digit));
		DecimalPart = ((DecimalPart*10.0) - Digit);
	}
}
     a56:	df 91       	pop	r29
     a58:	cf 91       	pop	r28
     a5a:	ff 90       	pop	r15
     a5c:	ef 90       	pop	r14
     a5e:	df 90       	pop	r13
     a60:	cf 90       	pop	r12
     a62:	bf 90       	pop	r11
     a64:	af 90       	pop	r10
     a66:	9f 90       	pop	r9
     a68:	8f 90       	pop	r8
     a6a:	08 95       	ret

00000a6c <GLCD_GoToLine>:

void GLCD_GoToLine(u8 Line) {
     a6c:	cf 93       	push	r28
	if (Line < GLCD_MAX_LINES) {
     a6e:	88 30       	cpi	r24, 0x08	; 8
     a70:	78 f4       	brcc	.+30     	; 0xa90 <GLCD_GoToLine+0x24>
     a72:	c8 2f       	mov	r28, r24
		GLCD_SelectPage(GLCD_PAGE_0);
     a74:	81 e0       	ldi	r24, 0x01	; 1
     a76:	0e 94 d6 01 	call	0x3ac	; 0x3ac <GLCD_SelectPage>
		gu8_Curr_X_Address = Line;
     a7a:	c0 93 ac 00 	sts	0x00AC, r28	; 0x8000ac <gu8_Curr_X_Address>
		GLCD_SendInstruction(GLCD_SET_X_ADDRESS_PREFIX + gu8_Curr_X_Address);
     a7e:	88 eb       	ldi	r24, 0xB8	; 184
     a80:	8c 0f       	add	r24, r28
     a82:	0e 94 0a 02 	call	0x414	; 0x414 <GLCD_SendInstruction>
		gu8_Curr_Y_Address = 0;
     a86:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <gu8_Curr_Y_Address>
		GLCD_SendInstruction(GLCD_SET_Y_ADDRESS_PREFIX + gu8_Curr_Y_Address);
     a8a:	80 e4       	ldi	r24, 0x40	; 64
     a8c:	0e 94 0a 02 	call	0x414	; 0x414 <GLCD_SendInstruction>
	}
}
     a90:	cf 91       	pop	r28
     a92:	08 95       	ret

00000a94 <GLCD_ClearDisplay>:

void GLCD_ClearDisplay(void) {
     a94:	cf 93       	push	r28
     a96:	df 93       	push	r29
	for (u8 Line = 0; Line < GLCD_MAX_LINES; Line++) {
     a98:	d0 e0       	ldi	r29, 0x00	; 0
     a9a:	13 c0       	rjmp	.+38     	; 0xac2 <GLCD_ClearDisplay+0x2e>
		GLCD_GoToLine(Line);
     a9c:	8d 2f       	mov	r24, r29
     a9e:	0e 94 36 05 	call	0xa6c	; 0xa6c <GLCD_GoToLine>
		GLCD_SelectPage(GLCD_BOTH_PAGES);
     aa2:	83 e0       	ldi	r24, 0x03	; 3
     aa4:	0e 94 d6 01 	call	0x3ac	; 0x3ac <GLCD_SelectPage>
		for (u8 i = 0; i < GLCD_MAX_PAGE_PIXEL_WIDTH; i++) {
     aa8:	c0 e0       	ldi	r28, 0x00	; 0
     aaa:	08 c0       	rjmp	.+16     	; 0xabc <GLCD_ClearDisplay+0x28>
			GLCD_SendInstruction(GLCD_SET_Y_ADDRESS_PREFIX + i);
     aac:	80 e4       	ldi	r24, 0x40	; 64
     aae:	8c 0f       	add	r24, r28
     ab0:	0e 94 0a 02 	call	0x414	; 0x414 <GLCD_SendInstruction>
			GLCD_SendData(0);
     ab4:	80 e0       	ldi	r24, 0x00	; 0
     ab6:	0e 94 6d 02 	call	0x4da	; 0x4da <GLCD_SendData>

void GLCD_ClearDisplay(void) {
	for (u8 Line = 0; Line < GLCD_MAX_LINES; Line++) {
		GLCD_GoToLine(Line);
		GLCD_SelectPage(GLCD_BOTH_PAGES);
		for (u8 i = 0; i < GLCD_MAX_PAGE_PIXEL_WIDTH; i++) {
     aba:	cf 5f       	subi	r28, 0xFF	; 255
     abc:	c0 34       	cpi	r28, 0x40	; 64
     abe:	b0 f3       	brcs	.-20     	; 0xaac <GLCD_ClearDisplay+0x18>
		GLCD_SendInstruction(GLCD_SET_Y_ADDRESS_PREFIX + gu8_Curr_Y_Address);
	}
}

void GLCD_ClearDisplay(void) {
	for (u8 Line = 0; Line < GLCD_MAX_LINES; Line++) {
     ac0:	df 5f       	subi	r29, 0xFF	; 255
     ac2:	d8 30       	cpi	r29, 0x08	; 8
     ac4:	58 f3       	brcs	.-42     	; 0xa9c <GLCD_ClearDisplay+0x8>
		for (u8 i = 0; i < GLCD_MAX_PAGE_PIXEL_WIDTH; i++) {
			GLCD_SendInstruction(GLCD_SET_Y_ADDRESS_PREFIX + i);
			GLCD_SendData(0);
		}
	}
	GLCD_Reset();
     ac6:	0e 94 8d 02 	call	0x51a	; 0x51a <GLCD_Reset>
	GLCD_SelectPage(GLCD_PAGE_0);
     aca:	81 e0       	ldi	r24, 0x01	; 1
     acc:	0e 94 d6 01 	call	0x3ac	; 0x3ac <GLCD_SelectPage>
	gu8_Curr_Page = 0;
     ad0:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <__data_end>
	GLCD_GoToLine(0);
     ad4:	80 e0       	ldi	r24, 0x00	; 0
     ad6:	0e 94 36 05 	call	0xa6c	; 0xa6c <GLCD_GoToLine>
}
     ada:	df 91       	pop	r29
     adc:	cf 91       	pop	r28
     ade:	08 95       	ret

00000ae0 <ICU_SetTriggerEdge>:
		default: break;
	}
}

void ICU_SetTriggerEdge(ICU_TimerChannelType Tmr_Channel, ICU_TriggerEdgeType Edge) {
	CLR_BIT(*TIMER1_CTRL_REG_B, ICU_TIMER1_EDGE_SELECT_BIT);
     ae0:	9e b5       	in	r25, 0x2e	; 46
     ae2:	9f 7b       	andi	r25, 0xBF	; 191
     ae4:	9e bd       	out	0x2e, r25	; 46
	switch (Tmr_Channel) {
     ae6:	81 11       	cpse	r24, r1
     ae8:	07 c0       	rjmp	.+14     	; 0xaf8 <ICU_SetTriggerEdge+0x18>
		case ICU_TIMER_1: *TIMER1_CTRL_REG_B |= (Edge<<ICU_TIMER1_EDGE_SELECT_BIT); break;
     aea:	8e b5       	in	r24, 0x2e	; 46
     aec:	90 e4       	ldi	r25, 0x40	; 64
     aee:	69 9f       	mul	r22, r25
     af0:	b0 01       	movw	r22, r0
     af2:	11 24       	eor	r1, r1
     af4:	68 2b       	or	r22, r24
     af6:	6e bd       	out	0x2e, r22	; 46
     af8:	08 95       	ret

00000afa <ICU_ClearTimerValue>:
		default: break;
	}
}

void ICU_ClearTimerValue(ICU_TimerChannelType Tmr_Channel) {
	switch (Tmr_Channel) {
     afa:	81 11       	cpse	r24, r1
     afc:	02 c0       	rjmp	.+4      	; 0xb02 <ICU_ClearTimerValue+0x8>
		case ICU_TIMER_1: *(u16*)TIMER1_CNTR_REG_L = 0x0000U; break;
     afe:	1d bc       	out	0x2d, r1	; 45
     b00:	1c bc       	out	0x2c, r1	; 44
     b02:	08 95       	ret

00000b04 <ICU_GetInputCaptureValue>:
	}
}

u16 ICU_GetInputCaptureValue(ICU_TimerChannelType Tmr_Channel) {
	u16 u16Local_Value = 0U;
	switch (Tmr_Channel) {
     b04:	81 11       	cpse	r24, r1
     b06:	03 c0       	rjmp	.+6      	; 0xb0e <ICU_GetInputCaptureValue+0xa>
		case ICU_TIMER_1: u16Local_Value = (*(u16*)TIMER1_INP_CAPT_REG_L);
     b08:	86 b5       	in	r24, 0x26	; 38
     b0a:	97 b5       	in	r25, 0x27	; 39
     b0c:	08 95       	ret
		default: break;
	}
}

u16 ICU_GetInputCaptureValue(ICU_TimerChannelType Tmr_Channel) {
	u16 u16Local_Value = 0U;
     b0e:	80 e0       	ldi	r24, 0x00	; 0
     b10:	90 e0       	ldi	r25, 0x00	; 0
	switch (Tmr_Channel) {
		case ICU_TIMER_1: u16Local_Value = (*(u16*)TIMER1_INP_CAPT_REG_L);
		default: break;
	}
	return u16Local_Value;
}
     b12:	08 95       	ret

00000b14 <ICU_GetStatus>:

ICU_StatusType ICU_GetStatus(ICU_TimerChannelType Tmr_Channel) {
	switch (Tmr_Channel) {
     b14:	81 11       	cpse	r24, r1
     b16:	08 c0       	rjmp	.+16     	; 0xb28 <ICU_GetStatus+0x14>
		case ICU_TIMER_1: 
			if (GET_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_INT_BIT) == 1) {
     b18:	08 b6       	in	r0, 0x38	; 56
     b1a:	05 fe       	sbrs	r0, 5
     b1c:	07 c0       	rjmp	.+14     	; 0xb2c <ICU_GetStatus+0x18>
				SET_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_INT_BIT);  
     b1e:	88 b7       	in	r24, 0x38	; 56
     b20:	80 62       	ori	r24, 0x20	; 32
     b22:	88 bf       	out	0x38, r24	; 56
				return ICU_EVENT_CATURED;
     b24:	81 e0       	ldi	r24, 0x01	; 1
     b26:	08 95       	ret
			} else {
				return ICU_RUNNING;
			}
		default: break;
	}
	return ICU_RUNNING;
     b28:	80 e0       	ldi	r24, 0x00	; 0
     b2a:	08 95       	ret
		case ICU_TIMER_1: 
			if (GET_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_INT_BIT) == 1) {
				SET_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_INT_BIT);  
				return ICU_EVENT_CATURED;
			} else {
				return ICU_RUNNING;
     b2c:	80 e0       	ldi	r24, 0x00	; 0
			}
		default: break;
	}
	return ICU_RUNNING;
}
     b2e:	08 95       	ret

00000b30 <ICU_InitTimer1>:
		default: break;
	}
}


void ICU_InitTimer1(const ICU_ConfigurationType* Config_Ptr) {
     b30:	fc 01       	movw	r30, r24
	
	CLR_BIT(*PORTD_DIR_REG, 6U);
     b32:	81 b3       	in	r24, 0x11	; 17
     b34:	8f 7b       	andi	r24, 0xBF	; 191
     b36:	81 bb       	out	0x11, r24	; 17
	
	*TIMER1_CTRL_REG_A = 0x00U;
     b38:	1f bc       	out	0x2f, r1	; 47
	*TIMER1_CTRL_REG_B = 0x00U;
     b3a:	1e bc       	out	0x2e, r1	; 46
	
	
	*TIMER1_CTRL_REG_B |= (Config_Ptr->Clk_Prescale);
     b3c:	9e b5       	in	r25, 0x2e	; 46
     b3e:	81 81       	ldd	r24, Z+1	; 0x01
     b40:	89 2b       	or	r24, r25
     b42:	8e bd       	out	0x2e, r24	; 46
	
	*TIMER1_CTRL_REG_B |= ((Config_Ptr->Trigger_Edge)<<ICU_TIMER1_EDGE_SELECT_BIT);
     b44:	8e b5       	in	r24, 0x2e	; 46
     b46:	92 81       	ldd	r25, Z+2	; 0x02
     b48:	40 e4       	ldi	r20, 0x40	; 64
     b4a:	94 9f       	mul	r25, r20
     b4c:	90 01       	movw	r18, r0
     b4e:	11 24       	eor	r1, r1
     b50:	28 2b       	or	r18, r24
     b52:	2e bd       	out	0x2e, r18	; 46
	
	*TIMERS_INT_MASK_REG |= ((Config_Ptr->Int_State)<<ICU_TIMER1_INT_BIT);
     b54:	29 b7       	in	r18, 0x39	; 57
     b56:	93 81       	ldd	r25, Z+3	; 0x03
     b58:	30 e2       	ldi	r19, 0x20	; 32
     b5a:	93 9f       	mul	r25, r19
     b5c:	c0 01       	movw	r24, r0
     b5e:	11 24       	eor	r1, r1
     b60:	82 2b       	or	r24, r18
     b62:	89 bf       	out	0x39, r24	; 57
	
	*(u16*)TIMER1_CNTR_REG_L = 0x0000U;
     b64:	1d bc       	out	0x2d, r1	; 45
     b66:	1c bc       	out	0x2c, r1	; 44
	*(u16*)TIMER1_INP_CAPT_REG_L = 0x0000U;
     b68:	17 bc       	out	0x27, r1	; 39
     b6a:	16 bc       	out	0x26, r1	; 38
     b6c:	08 95       	ret

00000b6e <ICU_Init>:
void ICU_InitTimer1(const ICU_ConfigurationType* Config_Ptr);
void ICU_GetDutyCycle_Timer1(u16 Prescale_Value, ICU_DutyCycleType* Duty_Ptr);


void ICU_Init(const ICU_ConfigurationType* Config_Ptr) {
	switch (Config_Ptr->Tmr_Channel) {
     b6e:	fc 01       	movw	r30, r24
     b70:	20 81       	ld	r18, Z
     b72:	21 11       	cpse	r18, r1
     b74:	02 c0       	rjmp	.+4      	; 0xb7a <ICU_Init+0xc>
		case ICU_TIMER_1: ICU_InitTimer1(Config_Ptr); break;
     b76:	0e 94 98 05 	call	0xb30	; 0xb30 <ICU_InitTimer1>
     b7a:	08 95       	ret

00000b7c <ICU_GetDutyCycle_Timer1>:
	
	*(u16*)TIMER1_CNTR_REG_L = 0x0000U;
	*(u16*)TIMER1_INP_CAPT_REG_L = 0x0000U;
}

void ICU_GetDutyCycle_Timer1(u16 Prescale_Value, ICU_DutyCycleType* Duty_Ptr) {
     b7c:	4f 92       	push	r4
     b7e:	5f 92       	push	r5
     b80:	6f 92       	push	r6
     b82:	7f 92       	push	r7
     b84:	8f 92       	push	r8
     b86:	9f 92       	push	r9
     b88:	af 92       	push	r10
     b8a:	bf 92       	push	r11
     b8c:	cf 92       	push	r12
     b8e:	df 92       	push	r13
     b90:	ef 92       	push	r14
     b92:	ff 92       	push	r15
     b94:	0f 93       	push	r16
     b96:	1f 93       	push	r17
     b98:	cf 93       	push	r28
     b9a:	df 93       	push	r29
     b9c:	ec 01       	movw	r28, r24
     b9e:	8b 01       	movw	r16, r22
	
	SET_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_INT_BIT);
     ba0:	88 b7       	in	r24, 0x38	; 56
     ba2:	80 62       	ori	r24, 0x20	; 32
     ba4:	88 bf       	out	0x38, r24	; 56
	ICU_SetTriggerEdge(ICU_TIMER_1, ICU_TRIGGER_RISING_EDGE);
     ba6:	61 e0       	ldi	r22, 0x01	; 1
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	0e 94 70 05 	call	0xae0	; 0xae0 <ICU_SetTriggerEdge>
	
	while (ICU_GetStatus(ICU_TIMER_1) == ICU_RUNNING) {
     bae:	80 e0       	ldi	r24, 0x00	; 0
     bb0:	0e 94 8a 05 	call	0xb14	; 0xb14 <ICU_GetStatus>
     bb4:	88 23       	and	r24, r24
     bb6:	d9 f3       	breq	.-10     	; 0xbae <ICU_GetDutyCycle_Timer1+0x32>
		; 
	}

	u32 u32Local_ON_Counts = 0U;
	ICU_SetTriggerEdge(ICU_TIMER_1, ICU_TRIGGER_FALLING_EDGE);
     bb8:	60 e0       	ldi	r22, 0x00	; 0
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	0e 94 70 05 	call	0xae0	; 0xae0 <ICU_SetTriggerEdge>
	ICU_ClearTimerValue(ICU_TIMER_1);
     bc0:	80 e0       	ldi	r24, 0x00	; 0
     bc2:	0e 94 7d 05 	call	0xafa	; 0xafa <ICU_ClearTimerValue>
	
	SET_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_INT_BIT);
     bc6:	88 b7       	in	r24, 0x38	; 56
     bc8:	80 62       	ori	r24, 0x20	; 32
     bca:	88 bf       	out	0x38, r24	; 56
	
	while (ICU_GetStatus(ICU_TIMER_1) == ICU_RUNNING) {
		; 
	}

	u32 u32Local_ON_Counts = 0U;
     bcc:	c1 2c       	mov	r12, r1
     bce:	d1 2c       	mov	r13, r1
     bd0:	76 01       	movw	r14, r12
	ICU_SetTriggerEdge(ICU_TIMER_1, ICU_TRIGGER_FALLING_EDGE);
	ICU_ClearTimerValue(ICU_TIMER_1);
	
	SET_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_INT_BIT);
	
	while (ICU_GetStatus(ICU_TIMER_1) == ICU_RUNNING) {
     bd2:	09 c0       	rjmp	.+18     	; 0xbe6 <ICU_GetDutyCycle_Timer1+0x6a>
		if (GET_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_OVF_FLAG_BIT) == 1) {
     bd4:	08 b6       	in	r0, 0x38	; 56
     bd6:	02 fe       	sbrs	r0, 2
     bd8:	06 c0       	rjmp	.+12     	; 0xbe6 <ICU_GetDutyCycle_Timer1+0x6a>
			SET_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_OVF_FLAG_BIT);
     bda:	88 b7       	in	r24, 0x38	; 56
     bdc:	84 60       	ori	r24, 0x04	; 4
     bde:	88 bf       	out	0x38, r24	; 56
			u32Local_ON_Counts += ICU_TIMER1_RESOLUTION;
     be0:	8f ef       	ldi	r24, 0xFF	; 255
     be2:	e8 1a       	sub	r14, r24
     be4:	f8 0a       	sbc	r15, r24
	ICU_SetTriggerEdge(ICU_TIMER_1, ICU_TRIGGER_FALLING_EDGE);
	ICU_ClearTimerValue(ICU_TIMER_1);
	
	SET_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_INT_BIT);
	
	while (ICU_GetStatus(ICU_TIMER_1) == ICU_RUNNING) {
     be6:	80 e0       	ldi	r24, 0x00	; 0
     be8:	0e 94 8a 05 	call	0xb14	; 0xb14 <ICU_GetStatus>
     bec:	88 23       	and	r24, r24
     bee:	91 f3       	breq	.-28     	; 0xbd4 <ICU_GetDutyCycle_Timer1+0x58>
		if (GET_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_OVF_FLAG_BIT) == 1) {
			SET_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_OVF_FLAG_BIT);
			u32Local_ON_Counts += ICU_TIMER1_RESOLUTION;
		}
	}
	u32Local_ON_Counts += ICU_GetInputCaptureValue(ICU_TIMER_1);
     bf0:	80 e0       	ldi	r24, 0x00	; 0
     bf2:	0e 94 82 05 	call	0xb04	; 0xb04 <ICU_GetInputCaptureValue>
     bf6:	c8 0e       	add	r12, r24
     bf8:	d9 1e       	adc	r13, r25
     bfa:	e1 1c       	adc	r14, r1
     bfc:	f1 1c       	adc	r15, r1

	u32 u32Local_OFF_Counts = 0U;
	ICU_SetTriggerEdge(ICU_TIMER_1, ICU_TRIGGER_RISING_EDGE);
     bfe:	61 e0       	ldi	r22, 0x01	; 1
     c00:	80 e0       	ldi	r24, 0x00	; 0
     c02:	0e 94 70 05 	call	0xae0	; 0xae0 <ICU_SetTriggerEdge>
	ICU_ClearTimerValue(ICU_TIMER_1);
     c06:	80 e0       	ldi	r24, 0x00	; 0
     c08:	0e 94 7d 05 	call	0xafa	; 0xafa <ICU_ClearTimerValue>
	
	SET_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_INT_BIT);
     c0c:	88 b7       	in	r24, 0x38	; 56
     c0e:	80 62       	ori	r24, 0x20	; 32
     c10:	88 bf       	out	0x38, r24	; 56
	
	while (ICU_GetStatus(ICU_TIMER_1) == ICU_RUNNING) {
     c12:	06 c0       	rjmp	.+12     	; 0xc20 <ICU_GetDutyCycle_Timer1+0xa4>
		if (GET_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_OVF_FLAG_BIT) == 1) {
     c14:	08 b6       	in	r0, 0x38	; 56
     c16:	02 fe       	sbrs	r0, 2
     c18:	03 c0       	rjmp	.+6      	; 0xc20 <ICU_GetDutyCycle_Timer1+0xa4>
			SET_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_OVF_FLAG_BIT);
     c1a:	88 b7       	in	r24, 0x38	; 56
     c1c:	84 60       	ori	r24, 0x04	; 4
     c1e:	88 bf       	out	0x38, r24	; 56
	ICU_SetTriggerEdge(ICU_TIMER_1, ICU_TRIGGER_RISING_EDGE);
	ICU_ClearTimerValue(ICU_TIMER_1);
	
	SET_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_INT_BIT);
	
	while (ICU_GetStatus(ICU_TIMER_1) == ICU_RUNNING) {
     c20:	80 e0       	ldi	r24, 0x00	; 0
     c22:	0e 94 8a 05 	call	0xb14	; 0xb14 <ICU_GetStatus>
     c26:	88 23       	and	r24, r24
     c28:	a9 f3       	breq	.-22     	; 0xc14 <ICU_GetDutyCycle_Timer1+0x98>
		if (GET_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_OVF_FLAG_BIT) == 1) {
			SET_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_OVF_FLAG_BIT);
			u32Local_OFF_Counts += ICU_TIMER1_RESOLUTION;
		}
	}
	u32Local_OFF_Counts = ICU_GetInputCaptureValue(ICU_TIMER_1);
     c2a:	80 e0       	ldi	r24, 0x00	; 0
     c2c:	0e 94 82 05 	call	0xb04	; 0xb04 <ICU_GetInputCaptureValue>
     c30:	4c 01       	movw	r8, r24
     c32:	a1 2c       	mov	r10, r1
     c34:	b1 2c       	mov	r11, r1


	Duty_Ptr->High_Time = (f32)(u32Local_ON_Counts * Prescale_Value * 1000.0 / F_CPU);
     c36:	2e 01       	movw	r4, r28
     c38:	61 2c       	mov	r6, r1
     c3a:	71 2c       	mov	r7, r1
     c3c:	a7 01       	movw	r20, r14
     c3e:	96 01       	movw	r18, r12
     c40:	c3 01       	movw	r24, r6
     c42:	b2 01       	movw	r22, r4
     c44:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <__mulsi3>
     c48:	0e 94 75 0b 	call	0x16ea	; 0x16ea <__floatunsisf>
     c4c:	20 e0       	ldi	r18, 0x00	; 0
     c4e:	30 e0       	ldi	r19, 0x00	; 0
     c50:	4a e7       	ldi	r20, 0x7A	; 122
     c52:	54 e4       	ldi	r21, 0x44	; 68
     c54:	0e 94 03 0c 	call	0x1806	; 0x1806 <__mulsf3>
     c58:	20 e0       	ldi	r18, 0x00	; 0
     c5a:	34 e2       	ldi	r19, 0x24	; 36
     c5c:	44 e7       	ldi	r20, 0x74	; 116
     c5e:	5b e4       	ldi	r21, 0x4B	; 75
     c60:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <__divsf3>
     c64:	f8 01       	movw	r30, r16
     c66:	60 83       	st	Z, r22
     c68:	71 83       	std	Z+1, r23	; 0x01
     c6a:	82 83       	std	Z+2, r24	; 0x02
     c6c:	93 83       	std	Z+3, r25	; 0x03
	Duty_Ptr->Period_Time = (f32)((u32Local_ON_Counts+u32Local_OFF_Counts) * Prescale_Value * 1000.0 / F_CPU);
     c6e:	c7 01       	movw	r24, r14
     c70:	b6 01       	movw	r22, r12
     c72:	68 0d       	add	r22, r8
     c74:	79 1d       	adc	r23, r9
     c76:	8a 1d       	adc	r24, r10
     c78:	9b 1d       	adc	r25, r11
     c7a:	a3 01       	movw	r20, r6
     c7c:	92 01       	movw	r18, r4
     c7e:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <__mulsi3>
     c82:	0e 94 75 0b 	call	0x16ea	; 0x16ea <__floatunsisf>
     c86:	20 e0       	ldi	r18, 0x00	; 0
     c88:	30 e0       	ldi	r19, 0x00	; 0
     c8a:	4a e7       	ldi	r20, 0x7A	; 122
     c8c:	54 e4       	ldi	r21, 0x44	; 68
     c8e:	0e 94 03 0c 	call	0x1806	; 0x1806 <__mulsf3>
     c92:	20 e0       	ldi	r18, 0x00	; 0
     c94:	34 e2       	ldi	r19, 0x24	; 36
     c96:	44 e7       	ldi	r20, 0x74	; 116
     c98:	5b e4       	ldi	r21, 0x4B	; 75
     c9a:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <__divsf3>
     c9e:	f8 01       	movw	r30, r16
     ca0:	64 83       	std	Z+4, r22	; 0x04
     ca2:	75 83       	std	Z+5, r23	; 0x05
     ca4:	86 83       	std	Z+6, r24	; 0x06
     ca6:	97 83       	std	Z+7, r25	; 0x07
}
     ca8:	df 91       	pop	r29
     caa:	cf 91       	pop	r28
     cac:	1f 91       	pop	r17
     cae:	0f 91       	pop	r16
     cb0:	ff 90       	pop	r15
     cb2:	ef 90       	pop	r14
     cb4:	df 90       	pop	r13
     cb6:	cf 90       	pop	r12
     cb8:	bf 90       	pop	r11
     cba:	af 90       	pop	r10
     cbc:	9f 90       	pop	r9
     cbe:	8f 90       	pop	r8
     cc0:	7f 90       	pop	r7
     cc2:	6f 90       	pop	r6
     cc4:	5f 90       	pop	r5
     cc6:	4f 90       	pop	r4
     cc8:	08 95       	ret

00000cca <ICU_GetDutyCycle>:
	}
	return ICU_RUNNING;
}

void ICU_GetDutyCycle(ICU_TimerChannelType Tmr_Channel, u16 Prescale_Value, ICU_DutyCycleType* Duty_Ptr) {
	switch (Tmr_Channel) {
     cca:	81 11       	cpse	r24, r1
     ccc:	04 c0       	rjmp	.+8      	; 0xcd6 <ICU_GetDutyCycle+0xc>
     cce:	cb 01       	movw	r24, r22
		case ICU_TIMER_1:
			ICU_GetDutyCycle_Timer1(Prescale_Value, Duty_Ptr);
     cd0:	ba 01       	movw	r22, r20
     cd2:	0e 94 be 05 	call	0xb7c	; 0xb7c <ICU_GetDutyCycle_Timer1>
     cd6:	08 95       	ret

00000cd8 <main>:
#include "PWM_Drawer_interface.h"

#include <util/delay.h>

int main(void)
{
     cd8:	cf 93       	push	r28
     cda:	df 93       	push	r29
     cdc:	cd b7       	in	r28, 0x3d	; 61
     cde:	de b7       	in	r29, 0x3e	; 62
     ce0:	61 97       	sbiw	r28, 0x11	; 17
     ce2:	0f b6       	in	r0, 0x3f	; 63
     ce4:	f8 94       	cli
     ce6:	de bf       	out	0x3e, r29	; 62
     ce8:	0f be       	out	0x3f, r0	; 63
     cea:	cd bf       	out	0x3d, r28	; 61
	PWMDrawer_Init();
     cec:	0e 94 8f 08 	call	0x111e	; 0x111e <PWMDrawer_Init>
	PWMDrawer_SignalAttributesType Signal_Data = {0, 0, 0, 0, 0};
     cf0:	fe 01       	movw	r30, r28
     cf2:	31 96       	adiw	r30, 0x01	; 1
     cf4:	81 e1       	ldi	r24, 0x11	; 17
     cf6:	df 01       	movw	r26, r30
     cf8:	1d 92       	st	X+, r1
     cfa:	8a 95       	dec	r24
     cfc:	e9 f7       	brne	.-6      	; 0xcf8 <main+0x20>
	f32 Scale_ms = 0.25;
	while(1)
	{
		PWMDrawer_MeasureSignal(&Signal_Data);
     cfe:	ce 01       	movw	r24, r28
     d00:	01 96       	adiw	r24, 0x01	; 1
     d02:	0e 94 9c 08 	call	0x1138	; 0x1138 <PWMDrawer_MeasureSignal>
		Scale_ms = (Signal_Data.Period_Time_ms) / 5;
     d06:	6a 85       	ldd	r22, Y+10	; 0x0a
     d08:	7b 85       	ldd	r23, Y+11	; 0x0b
     d0a:	8c 85       	ldd	r24, Y+12	; 0x0c
     d0c:	9d 85       	ldd	r25, Y+13	; 0x0d
     d0e:	20 e0       	ldi	r18, 0x00	; 0
     d10:	30 e0       	ldi	r19, 0x00	; 0
     d12:	40 ea       	ldi	r20, 0xA0	; 160
     d14:	50 e4       	ldi	r21, 0x40	; 64
     d16:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <__divsf3>
     d1a:	ab 01       	movw	r20, r22
     d1c:	bc 01       	movw	r22, r24
		PWMDrawer_DrawSignal(&Signal_Data, Scale_ms);
     d1e:	ce 01       	movw	r24, r28
     d20:	01 96       	adiw	r24, 0x01	; 1
     d22:	0e 94 0d 09 	call	0x121a	; 0x121a <PWMDrawer_DrawSignal>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d26:	bf ef       	ldi	r27, 0xFF	; 255
     d28:	21 ee       	ldi	r18, 0xE1	; 225
     d2a:	84 e0       	ldi	r24, 0x04	; 4
     d2c:	b1 50       	subi	r27, 0x01	; 1
     d2e:	20 40       	sbci	r18, 0x00	; 0
     d30:	80 40       	sbci	r24, 0x00	; 0
     d32:	e1 f7       	brne	.-8      	; 0xd2c <main+0x54>
     d34:	00 c0       	rjmp	.+0      	; 0xd36 <main+0x5e>
     d36:	00 00       	nop
     d38:	e2 cf       	rjmp	.-60     	; 0xcfe <main+0x26>

00000d3a <PWM_InitTimer0>:
		default: break;
	}
}


void PWM_InitTimer0(const PWM_ConfigurationType* Config_Ptr) {
     d3a:	fc 01       	movw	r30, r24
	
	SET_BIT(*PORTB_DIR_REG, 3U);
     d3c:	87 b3       	in	r24, 0x17	; 23
     d3e:	88 60       	ori	r24, 0x08	; 8
     d40:	87 bb       	out	0x17, r24	; 23
	
	*TIMER0_CTRL_REG = 0x00U;
     d42:	13 be       	out	0x33, r1	; 51
	
	*TIMER0_CTRL_REG |= (1U<<6U) | ((Config_Ptr->Mode)<<PWM_TIMER_0_FAST_BIT);
     d44:	23 b7       	in	r18, 0x33	; 51
     d46:	91 81       	ldd	r25, Z+1	; 0x01
     d48:	99 0f       	add	r25, r25
     d4a:	99 0f       	add	r25, r25
     d4c:	99 0f       	add	r25, r25
     d4e:	92 2b       	or	r25, r18
     d50:	90 64       	ori	r25, 0x40	; 64
     d52:	93 bf       	out	0x33, r25	; 51
	
	*TIMER0_CTRL_REG |= (1U<<5U) | ((Config_Ptr->State)<<PWM_TIMER_0_INVERTING_BIT);
     d54:	23 b7       	in	r18, 0x33	; 51
     d56:	93 81       	ldd	r25, Z+3	; 0x03
     d58:	92 95       	swap	r25
     d5a:	90 7f       	andi	r25, 0xF0	; 240
     d5c:	92 2b       	or	r25, r18
     d5e:	90 62       	ori	r25, 0x20	; 32
     d60:	93 bf       	out	0x33, r25	; 51
	
	switch (Config_Ptr->Clk_Prescale) {
     d62:	82 81       	ldd	r24, Z+2	; 0x02
     d64:	84 30       	cpi	r24, 0x04	; 4
     d66:	69 f0       	breq	.+26     	; 0xd82 <PWM_InitTimer0+0x48>
     d68:	18 f4       	brcc	.+6      	; 0xd70 <PWM_InitTimer0+0x36>
     d6a:	83 30       	cpi	r24, 0x03	; 3
     d6c:	30 f0       	brcs	.+12     	; 0xd7a <PWM_InitTimer0+0x40>
     d6e:	12 c0       	rjmp	.+36     	; 0xd94 <PWM_InitTimer0+0x5a>
     d70:	9a ef       	ldi	r25, 0xFA	; 250
     d72:	98 0f       	add	r25, r24
     d74:	94 30       	cpi	r25, 0x04	; 4
     d76:	50 f0       	brcs	.+20     	; 0xd8c <PWM_InitTimer0+0x52>
     d78:	0d c0       	rjmp	.+26     	; 0xd94 <PWM_InitTimer0+0x5a>
		case PWM_NO_CLK_SRC:
		case PWM_PRESCALE_1:
		case PWM_PRESCALE_8:
			*TIMER0_CTRL_REG |= (Config_Ptr->Clk_Prescale); break;
     d7a:	93 b7       	in	r25, 0x33	; 51
     d7c:	89 2b       	or	r24, r25
     d7e:	83 bf       	out	0x33, r24	; 51
     d80:	09 c0       	rjmp	.+18     	; 0xd94 <PWM_InitTimer0+0x5a>
		case PWM_PRESCALE_64:
			*TIMER0_CTRL_REG |= ((Config_Ptr->Clk_Prescale)-1U); break;
     d82:	93 b7       	in	r25, 0x33	; 51
     d84:	81 50       	subi	r24, 0x01	; 1
     d86:	89 2b       	or	r24, r25
     d88:	83 bf       	out	0x33, r24	; 51
     d8a:	04 c0       	rjmp	.+8      	; 0xd94 <PWM_InitTimer0+0x5a>
		case PWM_PRESCALE_256:
		case PWM_PRESCALE_1024:
		case PWM_EXT_CLK_FALLING_EDGE:
		case PWM_EXT_CLK_RISING_EDGE:
			*TIMER0_CTRL_REG |= ((Config_Ptr->Clk_Prescale)-2U); break;
     d8c:	93 b7       	in	r25, 0x33	; 51
     d8e:	82 50       	subi	r24, 0x02	; 2
     d90:	89 2b       	or	r24, r25
     d92:	83 bf       	out	0x33, r24	; 51
		default: break;
	}
	
	*TIMER0_CMP_REG = 0x00U;
     d94:	1c be       	out	0x3c, r1	; 60
	switch (Config_Ptr->State) {
     d96:	83 81       	ldd	r24, Z+3	; 0x03
     d98:	88 23       	and	r24, r24
     d9a:	19 f0       	breq	.+6      	; 0xda2 <PWM_InitTimer0+0x68>
     d9c:	81 30       	cpi	r24, 0x01	; 1
     d9e:	a1 f0       	breq	.+40     	; 0xdc8 <PWM_InitTimer0+0x8e>
     da0:	30 c0       	rjmp	.+96     	; 0xe02 <PWM_InitTimer0+0xc8>
		case PWM_NON_INVERTED: *TIMER0_CMP_REG = (u8)((Config_Ptr->Duty_Percent) * PWM_TIMER_0_RESOLUTION / 100.0); break;
     da2:	60 85       	ldd	r22, Z+8	; 0x08
     da4:	8f ef       	ldi	r24, 0xFF	; 255
     da6:	68 9f       	mul	r22, r24
     da8:	b0 01       	movw	r22, r0
     daa:	11 24       	eor	r1, r1
     dac:	80 e0       	ldi	r24, 0x00	; 0
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	0e 94 75 0b 	call	0x16ea	; 0x16ea <__floatunsisf>
     db4:	20 e0       	ldi	r18, 0x00	; 0
     db6:	30 e0       	ldi	r19, 0x00	; 0
     db8:	48 ec       	ldi	r20, 0xC8	; 200
     dba:	52 e4       	ldi	r21, 0x42	; 66
     dbc:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <__divsf3>
     dc0:	0e 94 46 0b 	call	0x168c	; 0x168c <__fixunssfsi>
     dc4:	6c bf       	out	0x3c, r22	; 60
     dc6:	1d c0       	rjmp	.+58     	; 0xe02 <PWM_InitTimer0+0xc8>
		case PWM_INVERTED: *TIMER0_CMP_REG = (u8)((100.0 - Config_Ptr->Duty_Percent) * PWM_TIMER_0_RESOLUTION / 100.0); break;
     dc8:	60 85       	ldd	r22, Z+8	; 0x08
     dca:	70 e0       	ldi	r23, 0x00	; 0
     dcc:	80 e0       	ldi	r24, 0x00	; 0
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	0e 94 77 0b 	call	0x16ee	; 0x16ee <__floatsisf>
     dd4:	9b 01       	movw	r18, r22
     dd6:	ac 01       	movw	r20, r24
     dd8:	60 e0       	ldi	r22, 0x00	; 0
     dda:	70 e0       	ldi	r23, 0x00	; 0
     ddc:	88 ec       	ldi	r24, 0xC8	; 200
     dde:	92 e4       	ldi	r25, 0x42	; 66
     de0:	0e 94 67 0a 	call	0x14ce	; 0x14ce <__subsf3>
     de4:	20 e0       	ldi	r18, 0x00	; 0
     de6:	30 e0       	ldi	r19, 0x00	; 0
     de8:	4f e7       	ldi	r20, 0x7F	; 127
     dea:	53 e4       	ldi	r21, 0x43	; 67
     dec:	0e 94 03 0c 	call	0x1806	; 0x1806 <__mulsf3>
     df0:	20 e0       	ldi	r18, 0x00	; 0
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	48 ec       	ldi	r20, 0xC8	; 200
     df6:	52 e4       	ldi	r21, 0x42	; 66
     df8:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <__divsf3>
     dfc:	0e 94 46 0b 	call	0x168c	; 0x168c <__fixunssfsi>
     e00:	6c bf       	out	0x3c, r22	; 60
		default: break;
	}
	
	*TIMER0_CNTR_REG = 0x00U;
     e02:	12 be       	out	0x32, r1	; 50
     e04:	08 95       	ret

00000e06 <PWM_InitTimer1>:
}

void PWM_InitTimer1(const PWM_ConfigurationType* Config_Ptr) {
     e06:	8f 92       	push	r8
     e08:	9f 92       	push	r9
     e0a:	af 92       	push	r10
     e0c:	bf 92       	push	r11
     e0e:	cf 92       	push	r12
     e10:	df 92       	push	r13
     e12:	ef 92       	push	r14
     e14:	ff 92       	push	r15
     e16:	cf 93       	push	r28
     e18:	df 93       	push	r29
     e1a:	ec 01       	movw	r28, r24
	
	switch (Config_Ptr->Tmr_Channel) {
     e1c:	88 81       	ld	r24, Y
     e1e:	81 30       	cpi	r24, 0x01	; 1
     e20:	19 f0       	breq	.+6      	; 0xe28 <PWM_InitTimer1+0x22>
     e22:	82 30       	cpi	r24, 0x02	; 2
     e24:	29 f0       	breq	.+10     	; 0xe30 <PWM_InitTimer1+0x2a>
     e26:	07 c0       	rjmp	.+14     	; 0xe36 <PWM_InitTimer1+0x30>
		case PWM_TIMER_1_CHANNEL_A:
			SET_BIT(*PORTD_DIR_REG, 5U);
     e28:	81 b3       	in	r24, 0x11	; 17
     e2a:	80 62       	ori	r24, 0x20	; 32
     e2c:	81 bb       	out	0x11, r24	; 17
			break;
     e2e:	03 c0       	rjmp	.+6      	; 0xe36 <PWM_InitTimer1+0x30>
		case PWM_TIMER_1_CHANNEL_B:
			SET_BIT(*PORTD_DIR_REG, 4U);
     e30:	81 b3       	in	r24, 0x11	; 17
     e32:	80 61       	ori	r24, 0x10	; 16
     e34:	81 bb       	out	0x11, r24	; 17
			break;
		default: break;
	}
	
	*TIMER1_CTRL_REG_A = 0x00U;
     e36:	1f bc       	out	0x2f, r1	; 47
	*TIMER1_CTRL_REG_B = 0x00U;
     e38:	1e bc       	out	0x2e, r1	; 46
	
	*TIMER1_CTRL_REG_A |= (0x02U);
     e3a:	8f b5       	in	r24, 0x2f	; 47
     e3c:	82 60       	ori	r24, 0x02	; 2
     e3e:	8f bd       	out	0x2f, r24	; 47
	*TIMER1_CTRL_REG_B |= (1U<<4U) | ((Config_Ptr->Mode)<<PWM_TIMER_1_FAST_BIT);
     e40:	9e b5       	in	r25, 0x2e	; 46
     e42:	89 81       	ldd	r24, Y+1	; 0x01
     e44:	88 0f       	add	r24, r24
     e46:	88 0f       	add	r24, r24
     e48:	88 0f       	add	r24, r24
     e4a:	89 2b       	or	r24, r25
     e4c:	80 61       	ori	r24, 0x10	; 16
     e4e:	8e bd       	out	0x2e, r24	; 46
	
	switch (Config_Ptr->Tmr_Channel) {
     e50:	88 81       	ld	r24, Y
     e52:	81 30       	cpi	r24, 0x01	; 1
     e54:	19 f0       	breq	.+6      	; 0xe5c <PWM_InitTimer1+0x56>
     e56:	82 30       	cpi	r24, 0x02	; 2
     e58:	51 f0       	breq	.+20     	; 0xe6e <PWM_InitTimer1+0x68>
     e5a:	10 c0       	rjmp	.+32     	; 0xe7c <PWM_InitTimer1+0x76>
		case PWM_TIMER_1_CHANNEL_A:
			*TIMER1_CTRL_REG_A |= (1U<<7U) | ((Config_Ptr->State)<<PWM_TIMER_1_A_INVERTING_BIT);
     e5c:	9f b5       	in	r25, 0x2f	; 47
     e5e:	8b 81       	ldd	r24, Y+3	; 0x03
     e60:	82 95       	swap	r24
     e62:	88 0f       	add	r24, r24
     e64:	88 0f       	add	r24, r24
     e66:	80 7c       	andi	r24, 0xC0	; 192
     e68:	89 2b       	or	r24, r25
     e6a:	80 68       	ori	r24, 0x80	; 128
     e6c:	8f bd       	out	0x2f, r24	; 47
		case PWM_TIMER_1_CHANNEL_B: 
			*TIMER1_CTRL_REG_A |= (1U<<5U) | ((Config_Ptr->State)<<PWM_TIMER_1_B_INVERTING_BIT);
     e6e:	9f b5       	in	r25, 0x2f	; 47
     e70:	8b 81       	ldd	r24, Y+3	; 0x03
     e72:	82 95       	swap	r24
     e74:	80 7f       	andi	r24, 0xF0	; 240
     e76:	89 2b       	or	r24, r25
     e78:	80 62       	ori	r24, 0x20	; 32
     e7a:	8f bd       	out	0x2f, r24	; 47
			break;
		default: break;
	}
	
	switch (Config_Ptr->Clk_Prescale) {
     e7c:	8a 81       	ldd	r24, Y+2	; 0x02
     e7e:	84 30       	cpi	r24, 0x04	; 4
     e80:	69 f0       	breq	.+26     	; 0xe9c <PWM_InitTimer1+0x96>
     e82:	18 f4       	brcc	.+6      	; 0xe8a <PWM_InitTimer1+0x84>
     e84:	83 30       	cpi	r24, 0x03	; 3
     e86:	30 f0       	brcs	.+12     	; 0xe94 <PWM_InitTimer1+0x8e>
     e88:	12 c0       	rjmp	.+36     	; 0xeae <PWM_InitTimer1+0xa8>
     e8a:	9a ef       	ldi	r25, 0xFA	; 250
     e8c:	98 0f       	add	r25, r24
     e8e:	94 30       	cpi	r25, 0x04	; 4
     e90:	50 f0       	brcs	.+20     	; 0xea6 <PWM_InitTimer1+0xa0>
     e92:	0d c0       	rjmp	.+26     	; 0xeae <PWM_InitTimer1+0xa8>
		case PWM_NO_CLK_SRC:
		case PWM_PRESCALE_1:
		case PWM_PRESCALE_8:
			*TIMER1_CTRL_REG_B |= (Config_Ptr->Clk_Prescale); break;
     e94:	9e b5       	in	r25, 0x2e	; 46
     e96:	89 2b       	or	r24, r25
     e98:	8e bd       	out	0x2e, r24	; 46
     e9a:	09 c0       	rjmp	.+18     	; 0xeae <PWM_InitTimer1+0xa8>
		case PWM_PRESCALE_64:
			*TIMER1_CTRL_REG_B |= ((Config_Ptr->Clk_Prescale)-1U); break;
     e9c:	9e b5       	in	r25, 0x2e	; 46
     e9e:	81 50       	subi	r24, 0x01	; 1
     ea0:	89 2b       	or	r24, r25
     ea2:	8e bd       	out	0x2e, r24	; 46
     ea4:	04 c0       	rjmp	.+8      	; 0xeae <PWM_InitTimer1+0xa8>
		case PWM_PRESCALE_256:
		case PWM_PRESCALE_1024:
		case PWM_EXT_CLK_FALLING_EDGE:
		case PWM_EXT_CLK_RISING_EDGE:
			*TIMER1_CTRL_REG_B |= ((Config_Ptr->Clk_Prescale)-2U); break;
     ea6:	9e b5       	in	r25, 0x2e	; 46
     ea8:	82 50       	subi	r24, 0x02	; 2
     eaa:	89 2b       	or	r24, r25
     eac:	8e bd       	out	0x2e, r24	; 46
		default: break;
	}
	
	gu16_PWM_TimerTopValue = (u16)((F_CPU * (Config_Ptr->Period_ms) / ((Config_Ptr->Prescale_Value) * 1000.0)) - 1U);
     eae:	ae 81       	ldd	r26, Y+6	; 0x06
     eb0:	bf 81       	ldd	r27, Y+7	; 0x07
     eb2:	20 e0       	ldi	r18, 0x00	; 0
     eb4:	34 e2       	ldi	r19, 0x24	; 36
     eb6:	44 ef       	ldi	r20, 0xF4	; 244
     eb8:	50 e0       	ldi	r21, 0x00	; 0
     eba:	0e 94 a5 0c 	call	0x194a	; 0x194a <__muluhisi3>
     ebe:	6b 01       	movw	r12, r22
     ec0:	7c 01       	movw	r14, r24
     ec2:	6c 81       	ldd	r22, Y+4	; 0x04
     ec4:	7d 81       	ldd	r23, Y+5	; 0x05
     ec6:	80 e0       	ldi	r24, 0x00	; 0
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	0e 94 75 0b 	call	0x16ea	; 0x16ea <__floatunsisf>
     ece:	20 e0       	ldi	r18, 0x00	; 0
     ed0:	30 e0       	ldi	r19, 0x00	; 0
     ed2:	4a e7       	ldi	r20, 0x7A	; 122
     ed4:	54 e4       	ldi	r21, 0x44	; 68
     ed6:	0e 94 03 0c 	call	0x1806	; 0x1806 <__mulsf3>
     eda:	4b 01       	movw	r8, r22
     edc:	5c 01       	movw	r10, r24
     ede:	c7 01       	movw	r24, r14
     ee0:	b6 01       	movw	r22, r12
     ee2:	0e 94 75 0b 	call	0x16ea	; 0x16ea <__floatunsisf>
     ee6:	a5 01       	movw	r20, r10
     ee8:	94 01       	movw	r18, r8
     eea:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <__divsf3>
     eee:	20 e0       	ldi	r18, 0x00	; 0
     ef0:	30 e0       	ldi	r19, 0x00	; 0
     ef2:	40 e8       	ldi	r20, 0x80	; 128
     ef4:	5f e3       	ldi	r21, 0x3F	; 63
     ef6:	0e 94 67 0a 	call	0x14ce	; 0x14ce <__subsf3>
     efa:	0e 94 46 0b 	call	0x168c	; 0x168c <__fixunssfsi>
     efe:	70 93 ae 00 	sts	0x00AE, r23	; 0x8000ae <gu16_PWM_TimerTopValue+0x1>
     f02:	60 93 ad 00 	sts	0x00AD, r22	; 0x8000ad <gu16_PWM_TimerTopValue>
	*(u16*)TIMER1_INP_CAPT_REG_L = gu16_PWM_TimerTopValue;
     f06:	77 bd       	out	0x27, r23	; 39
     f08:	66 bd       	out	0x26, r22	; 38
	
	switch (Config_Ptr->Tmr_Channel) {
     f0a:	88 81       	ld	r24, Y
     f0c:	81 30       	cpi	r24, 0x01	; 1
     f0e:	21 f0       	breq	.+8      	; 0xf18 <PWM_InitTimer1+0x112>
     f10:	82 30       	cpi	r24, 0x02	; 2
     f12:	09 f4       	brne	.+2      	; 0xf16 <PWM_InitTimer1+0x110>
     f14:	47 c0       	rjmp	.+142    	; 0xfa4 <PWM_InitTimer1+0x19e>
     f16:	8b c0       	rjmp	.+278    	; 0x102e <PWM_InitTimer1+0x228>
		case PWM_TIMER_1_CHANNEL_A:
			switch (Config_Ptr->State) {
     f18:	8b 81       	ldd	r24, Y+3	; 0x03
     f1a:	88 23       	and	r24, r24
     f1c:	19 f0       	breq	.+6      	; 0xf24 <PWM_InitTimer1+0x11e>
     f1e:	81 30       	cpi	r24, 0x01	; 1
     f20:	d1 f0       	breq	.+52     	; 0xf56 <PWM_InitTimer1+0x150>
     f22:	85 c0       	rjmp	.+266    	; 0x102e <PWM_InitTimer1+0x228>
				case PWM_NON_INVERTED: *(u16*)TIMER1_CMP_A_REG_L = (u16)((Config_Ptr->Duty_Percent) * gu16_PWM_TimerTopValue / 100.0); break;
     f24:	28 85       	ldd	r18, Y+8	; 0x08
     f26:	80 91 ad 00 	lds	r24, 0x00AD	; 0x8000ad <gu16_PWM_TimerTopValue>
     f2a:	90 91 ae 00 	lds	r25, 0x00AE	; 0x8000ae <gu16_PWM_TimerTopValue+0x1>
     f2e:	28 9f       	mul	r18, r24
     f30:	b0 01       	movw	r22, r0
     f32:	29 9f       	mul	r18, r25
     f34:	70 0d       	add	r23, r0
     f36:	11 24       	eor	r1, r1
     f38:	80 e0       	ldi	r24, 0x00	; 0
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	0e 94 75 0b 	call	0x16ea	; 0x16ea <__floatunsisf>
     f40:	20 e0       	ldi	r18, 0x00	; 0
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	48 ec       	ldi	r20, 0xC8	; 200
     f46:	52 e4       	ldi	r21, 0x42	; 66
     f48:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <__divsf3>
     f4c:	0e 94 46 0b 	call	0x168c	; 0x168c <__fixunssfsi>
     f50:	7b bd       	out	0x2b, r23	; 43
     f52:	6a bd       	out	0x2a, r22	; 42
     f54:	6c c0       	rjmp	.+216    	; 0x102e <PWM_InitTimer1+0x228>
				case PWM_INVERTED: *(u16*)TIMER1_CMP_A_REG_L = (u16)((100.0 - Config_Ptr->Duty_Percent) * gu16_PWM_TimerTopValue / 100.0); break;
     f56:	68 85       	ldd	r22, Y+8	; 0x08
     f58:	70 e0       	ldi	r23, 0x00	; 0
     f5a:	80 e0       	ldi	r24, 0x00	; 0
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	0e 94 77 0b 	call	0x16ee	; 0x16ee <__floatsisf>
     f62:	9b 01       	movw	r18, r22
     f64:	ac 01       	movw	r20, r24
     f66:	60 e0       	ldi	r22, 0x00	; 0
     f68:	70 e0       	ldi	r23, 0x00	; 0
     f6a:	88 ec       	ldi	r24, 0xC8	; 200
     f6c:	92 e4       	ldi	r25, 0x42	; 66
     f6e:	0e 94 67 0a 	call	0x14ce	; 0x14ce <__subsf3>
     f72:	6b 01       	movw	r12, r22
     f74:	7c 01       	movw	r14, r24
     f76:	60 91 ad 00 	lds	r22, 0x00AD	; 0x8000ad <gu16_PWM_TimerTopValue>
     f7a:	70 91 ae 00 	lds	r23, 0x00AE	; 0x8000ae <gu16_PWM_TimerTopValue+0x1>
     f7e:	80 e0       	ldi	r24, 0x00	; 0
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	0e 94 75 0b 	call	0x16ea	; 0x16ea <__floatunsisf>
     f86:	a7 01       	movw	r20, r14
     f88:	96 01       	movw	r18, r12
     f8a:	0e 94 03 0c 	call	0x1806	; 0x1806 <__mulsf3>
     f8e:	20 e0       	ldi	r18, 0x00	; 0
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	48 ec       	ldi	r20, 0xC8	; 200
     f94:	52 e4       	ldi	r21, 0x42	; 66
     f96:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <__divsf3>
     f9a:	0e 94 46 0b 	call	0x168c	; 0x168c <__fixunssfsi>
     f9e:	7b bd       	out	0x2b, r23	; 43
     fa0:	6a bd       	out	0x2a, r22	; 42
     fa2:	45 c0       	rjmp	.+138    	; 0x102e <PWM_InitTimer1+0x228>
				default: break;
			}
			break;
		case PWM_TIMER_1_CHANNEL_B:
			switch (Config_Ptr->State) {
     fa4:	8b 81       	ldd	r24, Y+3	; 0x03
     fa6:	88 23       	and	r24, r24
     fa8:	19 f0       	breq	.+6      	; 0xfb0 <PWM_InitTimer1+0x1aa>
     faa:	81 30       	cpi	r24, 0x01	; 1
     fac:	d1 f0       	breq	.+52     	; 0xfe2 <PWM_InitTimer1+0x1dc>
     fae:	3f c0       	rjmp	.+126    	; 0x102e <PWM_InitTimer1+0x228>
				case PWM_NON_INVERTED: *(u16*)TIMER1_CMP_B_REG_L = (u16)((Config_Ptr->Duty_Percent) * gu16_PWM_TimerTopValue / 100.0); break;
     fb0:	28 85       	ldd	r18, Y+8	; 0x08
     fb2:	80 91 ad 00 	lds	r24, 0x00AD	; 0x8000ad <gu16_PWM_TimerTopValue>
     fb6:	90 91 ae 00 	lds	r25, 0x00AE	; 0x8000ae <gu16_PWM_TimerTopValue+0x1>
     fba:	28 9f       	mul	r18, r24
     fbc:	b0 01       	movw	r22, r0
     fbe:	29 9f       	mul	r18, r25
     fc0:	70 0d       	add	r23, r0
     fc2:	11 24       	eor	r1, r1
     fc4:	80 e0       	ldi	r24, 0x00	; 0
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	0e 94 75 0b 	call	0x16ea	; 0x16ea <__floatunsisf>
     fcc:	20 e0       	ldi	r18, 0x00	; 0
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	48 ec       	ldi	r20, 0xC8	; 200
     fd2:	52 e4       	ldi	r21, 0x42	; 66
     fd4:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <__divsf3>
     fd8:	0e 94 46 0b 	call	0x168c	; 0x168c <__fixunssfsi>
     fdc:	79 bd       	out	0x29, r23	; 41
     fde:	68 bd       	out	0x28, r22	; 40
     fe0:	26 c0       	rjmp	.+76     	; 0x102e <PWM_InitTimer1+0x228>
				case PWM_INVERTED: *(u16*)TIMER1_CMP_B_REG_L = (u16)((100.0 - Config_Ptr->Duty_Percent) * gu16_PWM_TimerTopValue / 100.0); break;
     fe2:	68 85       	ldd	r22, Y+8	; 0x08
     fe4:	70 e0       	ldi	r23, 0x00	; 0
     fe6:	80 e0       	ldi	r24, 0x00	; 0
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	0e 94 77 0b 	call	0x16ee	; 0x16ee <__floatsisf>
     fee:	9b 01       	movw	r18, r22
     ff0:	ac 01       	movw	r20, r24
     ff2:	60 e0       	ldi	r22, 0x00	; 0
     ff4:	70 e0       	ldi	r23, 0x00	; 0
     ff6:	88 ec       	ldi	r24, 0xC8	; 200
     ff8:	92 e4       	ldi	r25, 0x42	; 66
     ffa:	0e 94 67 0a 	call	0x14ce	; 0x14ce <__subsf3>
     ffe:	6b 01       	movw	r12, r22
    1000:	7c 01       	movw	r14, r24
    1002:	60 91 ad 00 	lds	r22, 0x00AD	; 0x8000ad <gu16_PWM_TimerTopValue>
    1006:	70 91 ae 00 	lds	r23, 0x00AE	; 0x8000ae <gu16_PWM_TimerTopValue+0x1>
    100a:	80 e0       	ldi	r24, 0x00	; 0
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	0e 94 75 0b 	call	0x16ea	; 0x16ea <__floatunsisf>
    1012:	a7 01       	movw	r20, r14
    1014:	96 01       	movw	r18, r12
    1016:	0e 94 03 0c 	call	0x1806	; 0x1806 <__mulsf3>
    101a:	20 e0       	ldi	r18, 0x00	; 0
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	48 ec       	ldi	r20, 0xC8	; 200
    1020:	52 e4       	ldi	r21, 0x42	; 66
    1022:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <__divsf3>
    1026:	0e 94 46 0b 	call	0x168c	; 0x168c <__fixunssfsi>
    102a:	79 bd       	out	0x29, r23	; 41
    102c:	68 bd       	out	0x28, r22	; 40
			}
			break;
		default: break;
	}
	
	*(u16*)TIMER1_CNTR_REG_L = 0x0000U;
    102e:	1d bc       	out	0x2d, r1	; 45
    1030:	1c bc       	out	0x2c, r1	; 44
}
    1032:	df 91       	pop	r29
    1034:	cf 91       	pop	r28
    1036:	ff 90       	pop	r15
    1038:	ef 90       	pop	r14
    103a:	df 90       	pop	r13
    103c:	cf 90       	pop	r12
    103e:	bf 90       	pop	r11
    1040:	af 90       	pop	r10
    1042:	9f 90       	pop	r9
    1044:	8f 90       	pop	r8
    1046:	08 95       	ret

00001048 <PWM_InitTimer2>:

void PWM_InitTimer2(const PWM_ConfigurationType* Config_Ptr) {
    1048:	fc 01       	movw	r30, r24

	SET_BIT(*PORTD_DIR_REG, 7U);
    104a:	81 b3       	in	r24, 0x11	; 17
    104c:	80 68       	ori	r24, 0x80	; 128
    104e:	81 bb       	out	0x11, r24	; 17
	*TIMER2_CTRL_REG = 0x00U;
    1050:	15 bc       	out	0x25, r1	; 37
	*TIMER2_CTRL_REG |= (1U<<6U) | ((Config_Ptr->Mode)<<PWM_TIMER_2_FAST_BIT);
    1052:	25 b5       	in	r18, 0x25	; 37
    1054:	91 81       	ldd	r25, Z+1	; 0x01
    1056:	99 0f       	add	r25, r25
    1058:	99 0f       	add	r25, r25
    105a:	99 0f       	add	r25, r25
    105c:	92 2b       	or	r25, r18
    105e:	90 64       	ori	r25, 0x40	; 64
    1060:	95 bd       	out	0x25, r25	; 37
	*TIMER0_CTRL_REG |= (1U<<5U) | ((Config_Ptr->State)<<PWM_TIMER_2_INVERTING_BIT);
    1062:	23 b7       	in	r18, 0x33	; 51
    1064:	93 81       	ldd	r25, Z+3	; 0x03
    1066:	92 95       	swap	r25
    1068:	90 7f       	andi	r25, 0xF0	; 240
    106a:	92 2b       	or	r25, r18
    106c:	90 62       	ori	r25, 0x20	; 32
    106e:	93 bf       	out	0x33, r25	; 51
	
	if ((Config_Ptr->Clk_Prescale) != PWM_EXT_CLK_FALLING_EDGE && (Config_Ptr->Clk_Prescale) != PWM_EXT_CLK_RISING_EDGE) {
    1070:	92 81       	ldd	r25, Z+2	; 0x02
    1072:	88 ef       	ldi	r24, 0xF8	; 248
    1074:	89 0f       	add	r24, r25
    1076:	82 30       	cpi	r24, 0x02	; 2
    1078:	18 f0       	brcs	.+6      	; 0x1080 <PWM_InitTimer2+0x38>
		*TIMER2_CTRL_REG |= (Config_Ptr->Clk_Prescale);
    107a:	85 b5       	in	r24, 0x25	; 37
    107c:	89 2b       	or	r24, r25
    107e:	85 bd       	out	0x25, r24	; 37
	}
	
	*TIMER2_CMP_REG = 0x00U;
    1080:	13 bc       	out	0x23, r1	; 35
	switch (Config_Ptr->State) {
    1082:	83 81       	ldd	r24, Z+3	; 0x03
    1084:	88 23       	and	r24, r24
    1086:	19 f0       	breq	.+6      	; 0x108e <PWM_InitTimer2+0x46>
    1088:	81 30       	cpi	r24, 0x01	; 1
    108a:	a1 f0       	breq	.+40     	; 0x10b4 <PWM_InitTimer2+0x6c>
    108c:	30 c0       	rjmp	.+96     	; 0x10ee <PWM_InitTimer2+0xa6>
		case PWM_NON_INVERTED: *TIMER2_CMP_REG = (u8)((Config_Ptr->Duty_Percent) * PWM_TIMER_2_RESOLUTION / 100.0); break;
    108e:	60 85       	ldd	r22, Z+8	; 0x08
    1090:	8f ef       	ldi	r24, 0xFF	; 255
    1092:	68 9f       	mul	r22, r24
    1094:	b0 01       	movw	r22, r0
    1096:	11 24       	eor	r1, r1
    1098:	80 e0       	ldi	r24, 0x00	; 0
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	0e 94 75 0b 	call	0x16ea	; 0x16ea <__floatunsisf>
    10a0:	20 e0       	ldi	r18, 0x00	; 0
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	48 ec       	ldi	r20, 0xC8	; 200
    10a6:	52 e4       	ldi	r21, 0x42	; 66
    10a8:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <__divsf3>
    10ac:	0e 94 46 0b 	call	0x168c	; 0x168c <__fixunssfsi>
    10b0:	63 bd       	out	0x23, r22	; 35
    10b2:	1d c0       	rjmp	.+58     	; 0x10ee <PWM_InitTimer2+0xa6>
		case PWM_INVERTED: *TIMER2_CMP_REG = (u8)((100.0 - Config_Ptr->Duty_Percent) * PWM_TIMER_2_RESOLUTION / 100.0); break;
    10b4:	60 85       	ldd	r22, Z+8	; 0x08
    10b6:	70 e0       	ldi	r23, 0x00	; 0
    10b8:	80 e0       	ldi	r24, 0x00	; 0
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	0e 94 77 0b 	call	0x16ee	; 0x16ee <__floatsisf>
    10c0:	9b 01       	movw	r18, r22
    10c2:	ac 01       	movw	r20, r24
    10c4:	60 e0       	ldi	r22, 0x00	; 0
    10c6:	70 e0       	ldi	r23, 0x00	; 0
    10c8:	88 ec       	ldi	r24, 0xC8	; 200
    10ca:	92 e4       	ldi	r25, 0x42	; 66
    10cc:	0e 94 67 0a 	call	0x14ce	; 0x14ce <__subsf3>
    10d0:	20 e0       	ldi	r18, 0x00	; 0
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	4f e7       	ldi	r20, 0x7F	; 127
    10d6:	53 e4       	ldi	r21, 0x43	; 67
    10d8:	0e 94 03 0c 	call	0x1806	; 0x1806 <__mulsf3>
    10dc:	20 e0       	ldi	r18, 0x00	; 0
    10de:	30 e0       	ldi	r19, 0x00	; 0
    10e0:	48 ec       	ldi	r20, 0xC8	; 200
    10e2:	52 e4       	ldi	r21, 0x42	; 66
    10e4:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <__divsf3>
    10e8:	0e 94 46 0b 	call	0x168c	; 0x168c <__fixunssfsi>
    10ec:	63 bd       	out	0x23, r22	; 35
		default: break;
	}
	
	*TIMER2_CNTR_REG = 0x00U;
    10ee:	14 bc       	out	0x24, r1	; 36
    10f0:	08 95       	ret

000010f2 <PWM_Init>:
void PWM_InitTimer0(const PWM_ConfigurationType* Config_Ptr);
void PWM_InitTimer1(const PWM_ConfigurationType* Config_Ptr);
void PWM_InitTimer2(const PWM_ConfigurationType* Config_Ptr);


void PWM_Init(const PWM_ConfigurationType* Config_Ptr) {
    10f2:	fc 01       	movw	r30, r24
	switch (Config_Ptr->Tmr_Channel) {
    10f4:	90 81       	ld	r25, Z
    10f6:	93 30       	cpi	r25, 0x03	; 3
    10f8:	18 f4       	brcc	.+6      	; 0x1100 <PWM_Init+0xe>
    10fa:	91 30       	cpi	r25, 0x01	; 1
    10fc:	20 f0       	brcs	.+8      	; 0x1106 <PWM_Init+0x14>
    10fe:	07 c0       	rjmp	.+14     	; 0x110e <PWM_Init+0x1c>
    1100:	93 30       	cpi	r25, 0x03	; 3
    1102:	49 f0       	breq	.+18     	; 0x1116 <PWM_Init+0x24>
    1104:	08 95       	ret
		case PWM_TIMER_0_CHANNEL: PWM_InitTimer0(Config_Ptr); break;
    1106:	cf 01       	movw	r24, r30
    1108:	0e 94 9d 06 	call	0xd3a	; 0xd3a <PWM_InitTimer0>
    110c:	08 95       	ret
		case PWM_TIMER_1_CHANNEL_A:
		case PWM_TIMER_1_CHANNEL_B: PWM_InitTimer1(Config_Ptr); break;
    110e:	cf 01       	movw	r24, r30
    1110:	0e 94 03 07 	call	0xe06	; 0xe06 <PWM_InitTimer1>
    1114:	08 95       	ret
		case PWM_TIMER_2_CHANNEL: PWM_InitTimer2(Config_Ptr); break;
    1116:	cf 01       	movw	r24, r30
    1118:	0e 94 24 08 	call	0x1048	; 0x1048 <PWM_InitTimer2>
    111c:	08 95       	ret

0000111e <PWMDrawer_Init>:
	{0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x00}
};

void PWMDrawer_Init(void) {
	#if GENERATE_PWM_FROM_SAME_MCU == 1
		GLCD_Init();
    111e:	0e 94 2a 02 	call	0x454	; 0x454 <GLCD_Init>
		GLCD_ClearDisplay();
    1122:	0e 94 4a 05 	call	0xa94	; 0xa94 <GLCD_ClearDisplay>
		PWM_Init(&gaStrPWM_Config[0]);		
    1126:	8b e9       	ldi	r24, 0x9B	; 155
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	0e 94 79 08 	call	0x10f2	; 0x10f2 <PWM_Init>
		ICU_Init(&gStrICU_Config);			
    112e:	87 e9       	ldi	r24, 0x97	; 151
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	0e 94 b7 05 	call	0xb6e	; 0xb6e <ICU_Init>
    1136:	08 95       	ret

00001138 <PWMDrawer_MeasureSignal>:
	#else
		PWM_Init(&gaStrPWM_Config[0]);		
	#endif
}

void PWMDrawer_MeasureSignal(PWMDrawer_SignalAttributesType* Signal_Data_Ptr) {
    1138:	8f 92       	push	r8
    113a:	9f 92       	push	r9
    113c:	af 92       	push	r10
    113e:	bf 92       	push	r11
    1140:	cf 92       	push	r12
    1142:	df 92       	push	r13
    1144:	ef 92       	push	r14
    1146:	ff 92       	push	r15
    1148:	0f 93       	push	r16
    114a:	1f 93       	push	r17
    114c:	cf 93       	push	r28
    114e:	df 93       	push	r29
    1150:	cd b7       	in	r28, 0x3d	; 61
    1152:	de b7       	in	r29, 0x3e	; 62
    1154:	28 97       	sbiw	r28, 0x08	; 8
    1156:	0f b6       	in	r0, 0x3f	; 63
    1158:	f8 94       	cli
    115a:	de bf       	out	0x3e, r29	; 62
    115c:	0f be       	out	0x3f, r0	; 63
    115e:	cd bf       	out	0x3d, r28	; 61
    1160:	8c 01       	movw	r16, r24
	ICU_DutyCycleType strLocal_Duty = {0, 0};
    1162:	19 82       	std	Y+1, r1	; 0x01
    1164:	1a 82       	std	Y+2, r1	; 0x02
    1166:	1b 82       	std	Y+3, r1	; 0x03
    1168:	1c 82       	std	Y+4, r1	; 0x04
    116a:	1d 82       	std	Y+5, r1	; 0x05
    116c:	1e 82       	std	Y+6, r1	; 0x06
    116e:	1f 82       	std	Y+7, r1	; 0x07
    1170:	18 86       	std	Y+8, r1	; 0x08
	ICU_GetDutyCycle(ICU_TIMER_1, 8U, &strLocal_Duty);
    1172:	ae 01       	movw	r20, r28
    1174:	4f 5f       	subi	r20, 0xFF	; 255
    1176:	5f 4f       	sbci	r21, 0xFF	; 255
    1178:	68 e0       	ldi	r22, 0x08	; 8
    117a:	70 e0       	ldi	r23, 0x00	; 0
    117c:	80 e0       	ldi	r24, 0x00	; 0
    117e:	0e 94 65 06 	call	0xcca	; 0xcca <ICU_GetDutyCycle>
	Signal_Data_Ptr->Period_Time_ms = strLocal_Duty.Period_Time;
    1182:	cd 80       	ldd	r12, Y+5	; 0x05
    1184:	de 80       	ldd	r13, Y+6	; 0x06
    1186:	ef 80       	ldd	r14, Y+7	; 0x07
    1188:	f8 84       	ldd	r15, Y+8	; 0x08
    118a:	f8 01       	movw	r30, r16
    118c:	c1 86       	std	Z+9, r12	; 0x09
    118e:	d2 86       	std	Z+10, r13	; 0x0a
    1190:	e3 86       	std	Z+11, r14	; 0x0b
    1192:	f4 86       	std	Z+12, r15	; 0x0c
	Signal_Data_Ptr->High_Time_ms = strLocal_Duty.High_Time;
    1194:	89 80       	ldd	r8, Y+1	; 0x01
    1196:	9a 80       	ldd	r9, Y+2	; 0x02
    1198:	ab 80       	ldd	r10, Y+3	; 0x03
    119a:	bc 80       	ldd	r11, Y+4	; 0x04
    119c:	81 82       	std	Z+1, r8	; 0x01
    119e:	92 82       	std	Z+2, r9	; 0x02
    11a0:	a3 82       	std	Z+3, r10	; 0x03
    11a2:	b4 82       	std	Z+4, r11	; 0x04
	Signal_Data_Ptr->Low_Time_ms = strLocal_Duty.Period_Time - strLocal_Duty.High_Time;
    11a4:	a5 01       	movw	r20, r10
    11a6:	94 01       	movw	r18, r8
    11a8:	c7 01       	movw	r24, r14
    11aa:	b6 01       	movw	r22, r12
    11ac:	0e 94 67 0a 	call	0x14ce	; 0x14ce <__subsf3>
    11b0:	f8 01       	movw	r30, r16
    11b2:	65 83       	std	Z+5, r22	; 0x05
    11b4:	76 83       	std	Z+6, r23	; 0x06
    11b6:	87 83       	std	Z+7, r24	; 0x07
    11b8:	90 87       	std	Z+8, r25	; 0x08
	
	Signal_Data_Ptr->Freq_kHz = (1.0 / (Signal_Data_Ptr->Period_Time_ms));
    11ba:	a7 01       	movw	r20, r14
    11bc:	96 01       	movw	r18, r12
    11be:	60 e0       	ldi	r22, 0x00	; 0
    11c0:	70 e0       	ldi	r23, 0x00	; 0
    11c2:	80 e8       	ldi	r24, 0x80	; 128
    11c4:	9f e3       	ldi	r25, 0x3F	; 63
    11c6:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <__divsf3>
    11ca:	f8 01       	movw	r30, r16
    11cc:	65 87       	std	Z+13, r22	; 0x0d
    11ce:	76 87       	std	Z+14, r23	; 0x0e
    11d0:	87 87       	std	Z+15, r24	; 0x0f
    11d2:	90 8b       	std	Z+16, r25	; 0x10
	Signal_Data_Ptr->Duty_Percent = (u8)((Signal_Data_Ptr->High_Time_ms) * 100.0 / (Signal_Data_Ptr->Period_Time_ms));
    11d4:	20 e0       	ldi	r18, 0x00	; 0
    11d6:	30 e0       	ldi	r19, 0x00	; 0
    11d8:	48 ec       	ldi	r20, 0xC8	; 200
    11da:	52 e4       	ldi	r21, 0x42	; 66
    11dc:	c5 01       	movw	r24, r10
    11de:	b4 01       	movw	r22, r8
    11e0:	0e 94 03 0c 	call	0x1806	; 0x1806 <__mulsf3>
    11e4:	a7 01       	movw	r20, r14
    11e6:	96 01       	movw	r18, r12
    11e8:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <__divsf3>
    11ec:	0e 94 46 0b 	call	0x168c	; 0x168c <__fixunssfsi>
    11f0:	f8 01       	movw	r30, r16
    11f2:	60 83       	st	Z, r22
}
    11f4:	28 96       	adiw	r28, 0x08	; 8
    11f6:	0f b6       	in	r0, 0x3f	; 63
    11f8:	f8 94       	cli
    11fa:	de bf       	out	0x3e, r29	; 62
    11fc:	0f be       	out	0x3f, r0	; 63
    11fe:	cd bf       	out	0x3d, r28	; 61
    1200:	df 91       	pop	r29
    1202:	cf 91       	pop	r28
    1204:	1f 91       	pop	r17
    1206:	0f 91       	pop	r16
    1208:	ff 90       	pop	r15
    120a:	ef 90       	pop	r14
    120c:	df 90       	pop	r13
    120e:	cf 90       	pop	r12
    1210:	bf 90       	pop	r11
    1212:	af 90       	pop	r10
    1214:	9f 90       	pop	r9
    1216:	8f 90       	pop	r8
    1218:	08 95       	ret

0000121a <PWMDrawer_DrawSignal>:

void PWMDrawer_DrawSignal(PWMDrawer_SignalAttributesType* Signal_Data_Ptr, f32 Scale_ms) {
    121a:	af 92       	push	r10
    121c:	bf 92       	push	r11
    121e:	cf 92       	push	r12
    1220:	df 92       	push	r13
    1222:	ef 92       	push	r14
    1224:	ff 92       	push	r15
    1226:	0f 93       	push	r16
    1228:	1f 93       	push	r17
    122a:	cf 93       	push	r28
    122c:	df 93       	push	r29
    122e:	cd b7       	in	r28, 0x3d	; 61
    1230:	de b7       	in	r29, 0x3e	; 62
    1232:	ec 97       	sbiw	r28, 0x3c	; 60
    1234:	0f b6       	in	r0, 0x3f	; 63
    1236:	f8 94       	cli
    1238:	de bf       	out	0x3e, r29	; 62
    123a:	0f be       	out	0x3f, r0	; 63
    123c:	cd bf       	out	0x3d, r28	; 61
    123e:	5c 01       	movw	r10, r24
    1240:	6a 01       	movw	r12, r20
    1242:	7b 01       	movw	r14, r22
	GLCD_ClearDisplay();
    1244:	0e 94 4a 05 	call	0xa94	; 0xa94 <GLCD_ClearDisplay>
	
	GLCD_GoToLine(0);
    1248:	80 e0       	ldi	r24, 0x00	; 0
    124a:	0e 94 36 05 	call	0xa6c	; 0xa6c <GLCD_GoToLine>
	char txt1[15] = "Frequency=\0";
    124e:	8c e0       	ldi	r24, 0x0C	; 12
    1250:	e0 e6       	ldi	r30, 0x60	; 96
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	de 01       	movw	r26, r28
    1256:	11 96       	adiw	r26, 0x01	; 1
    1258:	01 90       	ld	r0, Z+
    125a:	0d 92       	st	X+, r0
    125c:	8a 95       	dec	r24
    125e:	e1 f7       	brne	.-8      	; 0x1258 <PWMDrawer_DrawSignal+0x3e>
    1260:	fe 01       	movw	r30, r28
    1262:	3d 96       	adiw	r30, 0x0d	; 13
    1264:	83 e0       	ldi	r24, 0x03	; 3
    1266:	df 01       	movw	r26, r30
    1268:	1d 92       	st	X+, r1
    126a:	8a 95       	dec	r24
    126c:	e9 f7       	brne	.-6      	; 0x1268 <PWMDrawer_DrawSignal+0x4e>
	GLCD_DisplayString(txt1);
    126e:	ce 01       	movw	r24, r28
    1270:	01 96       	adiw	r24, 0x01	; 1
    1272:	0e 94 87 04 	call	0x90e	; 0x90e <GLCD_DisplayString>
	GLCD_DisplayFloatingPoint(Signal_Data_Ptr->Freq_kHz);
    1276:	f5 01       	movw	r30, r10
    1278:	65 85       	ldd	r22, Z+13	; 0x0d
    127a:	76 85       	ldd	r23, Z+14	; 0x0e
    127c:	87 85       	ldd	r24, Z+15	; 0x0f
    127e:	90 89       	ldd	r25, Z+16	; 0x10
    1280:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <GLCD_DisplayFloatingPoint>
	char txt2[5] = " kHz\0";
    1284:	85 e0       	ldi	r24, 0x05	; 5
    1286:	e4 ea       	ldi	r30, 0xA4	; 164
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	de 01       	movw	r26, r28
    128c:	50 96       	adiw	r26, 0x10	; 16
    128e:	01 90       	ld	r0, Z+
    1290:	0d 92       	st	X+, r0
    1292:	8a 95       	dec	r24
    1294:	e1 f7       	brne	.-8      	; 0x128e <PWMDrawer_DrawSignal+0x74>
	GLCD_DisplayString(txt2);
    1296:	ce 01       	movw	r24, r28
    1298:	40 96       	adiw	r24, 0x10	; 16
    129a:	0e 94 87 04 	call	0x90e	; 0x90e <GLCD_DisplayString>

	GLCD_GoToLine(1);
    129e:	81 e0       	ldi	r24, 0x01	; 1
    12a0:	0e 94 36 05 	call	0xa6c	; 0xa6c <GLCD_GoToLine>
	char txt3[15] = "Duty=\0";
    12a4:	87 e0       	ldi	r24, 0x07	; 7
    12a6:	ef e6       	ldi	r30, 0x6F	; 111
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	de 01       	movw	r26, r28
    12ac:	55 96       	adiw	r26, 0x15	; 21
    12ae:	01 90       	ld	r0, Z+
    12b0:	0d 92       	st	X+, r0
    12b2:	8a 95       	dec	r24
    12b4:	e1 f7       	brne	.-8      	; 0x12ae <PWMDrawer_DrawSignal+0x94>
    12b6:	fe 01       	movw	r30, r28
    12b8:	7c 96       	adiw	r30, 0x1c	; 28
    12ba:	88 e0       	ldi	r24, 0x08	; 8
    12bc:	df 01       	movw	r26, r30
    12be:	1d 92       	st	X+, r1
    12c0:	8a 95       	dec	r24
    12c2:	e9 f7       	brne	.-6      	; 0x12be <PWMDrawer_DrawSignal+0xa4>
	GLCD_DisplayString(txt3);
    12c4:	ce 01       	movw	r24, r28
    12c6:	45 96       	adiw	r24, 0x15	; 21
    12c8:	0e 94 87 04 	call	0x90e	; 0x90e <GLCD_DisplayString>
	GLCD_DisplayInteger(Signal_Data_Ptr->Duty_Percent);
    12cc:	f5 01       	movw	r30, r10
    12ce:	60 81       	ld	r22, Z
    12d0:	70 e0       	ldi	r23, 0x00	; 0
    12d2:	80 e0       	ldi	r24, 0x00	; 0
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	0e 94 94 04 	call	0x928	; 0x928 <GLCD_DisplayInteger>
	char txt4[5] = " %\0";
    12da:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <__DATA_REGION_ORIGIN__+0x1e>
    12de:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <__DATA_REGION_ORIGIN__+0x1f>
    12e2:	9d a3       	std	Y+37, r25	; 0x25
    12e4:	8c a3       	std	Y+36, r24	; 0x24
    12e6:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    12ea:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
    12ee:	9f a3       	std	Y+39, r25	; 0x27
    12f0:	8e a3       	std	Y+38, r24	; 0x26
    12f2:	18 a6       	std	Y+40, r1	; 0x28
	GLCD_DisplayString(txt4);
    12f4:	ce 01       	movw	r24, r28
    12f6:	84 96       	adiw	r24, 0x24	; 36
    12f8:	0e 94 87 04 	call	0x90e	; 0x90e <GLCD_DisplayString>

	GLCD_GoToLine(6);
    12fc:	86 e0       	ldi	r24, 0x06	; 6
    12fe:	0e 94 36 05 	call	0xa6c	; 0xa6c <GLCD_GoToLine>
	u8 pixel_width_count = 0;
    1302:	10 e0       	ldi	r17, 0x00	; 0
	u8 i;
	while (pixel_width_count < GLCD_MAX_LINE_PIXEL_WIDTH - 8U) {
    1304:	4e c0       	rjmp	.+156    	; 0x13a2 <PWMDrawer_DrawSignal+0x188>
		GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_RISING_EDGE); pixel_width_count += 5;
    1306:	20 e4       	ldi	r18, 0x40	; 64
    1308:	30 e4       	ldi	r19, 0x40	; 64
    130a:	4e e7       	ldi	r20, 0x7E	; 126
    130c:	52 e0       	ldi	r21, 0x02	; 2
    130e:	62 e0       	ldi	r22, 0x02	; 2
    1310:	70 e0       	ldi	r23, 0x00	; 0
    1312:	80 e0       	ldi	r24, 0x00	; 0
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	0e 94 9c 02 	call	0x538	; 0x538 <GLCD_DisplaySpecialPattern>
    131a:	1b 5f       	subi	r17, 0xFB	; 251
		for (i = 0; i < ((u8)(Signal_Data_Ptr->High_Time_ms / Scale_ms)); i++) {
    131c:	00 e0       	ldi	r16, 0x00	; 0
    131e:	0c c0       	rjmp	.+24     	; 0x1338 <PWMDrawer_DrawSignal+0x11e>
			GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_HIGH_LINE); pixel_width_count += 5;
    1320:	22 e0       	ldi	r18, 0x02	; 2
    1322:	32 e0       	ldi	r19, 0x02	; 2
    1324:	42 e0       	ldi	r20, 0x02	; 2
    1326:	52 e0       	ldi	r21, 0x02	; 2
    1328:	62 e0       	ldi	r22, 0x02	; 2
    132a:	70 e0       	ldi	r23, 0x00	; 0
    132c:	80 e0       	ldi	r24, 0x00	; 0
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	0e 94 9c 02 	call	0x538	; 0x538 <GLCD_DisplaySpecialPattern>
    1334:	1b 5f       	subi	r17, 0xFB	; 251
	GLCD_GoToLine(6);
	u8 pixel_width_count = 0;
	u8 i;
	while (pixel_width_count < GLCD_MAX_LINE_PIXEL_WIDTH - 8U) {
		GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_RISING_EDGE); pixel_width_count += 5;
		for (i = 0; i < ((u8)(Signal_Data_Ptr->High_Time_ms / Scale_ms)); i++) {
    1336:	0f 5f       	subi	r16, 0xFF	; 255
    1338:	d5 01       	movw	r26, r10
    133a:	11 96       	adiw	r26, 0x01	; 1
    133c:	6d 91       	ld	r22, X+
    133e:	7d 91       	ld	r23, X+
    1340:	8d 91       	ld	r24, X+
    1342:	9c 91       	ld	r25, X
    1344:	14 97       	sbiw	r26, 0x04	; 4
    1346:	a7 01       	movw	r20, r14
    1348:	96 01       	movw	r18, r12
    134a:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <__divsf3>
    134e:	0e 94 46 0b 	call	0x168c	; 0x168c <__fixunssfsi>
    1352:	06 17       	cp	r16, r22
    1354:	28 f3       	brcs	.-54     	; 0x1320 <PWMDrawer_DrawSignal+0x106>
			GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_HIGH_LINE); pixel_width_count += 5;
		}
		GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_FALLING_EDGE); pixel_width_count += 5;
    1356:	22 e0       	ldi	r18, 0x02	; 2
    1358:	32 e0       	ldi	r19, 0x02	; 2
    135a:	4e e7       	ldi	r20, 0x7E	; 126
    135c:	50 e4       	ldi	r21, 0x40	; 64
    135e:	60 e4       	ldi	r22, 0x40	; 64
    1360:	70 e0       	ldi	r23, 0x00	; 0
    1362:	80 e0       	ldi	r24, 0x00	; 0
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	0e 94 9c 02 	call	0x538	; 0x538 <GLCD_DisplaySpecialPattern>
    136a:	1b 5f       	subi	r17, 0xFB	; 251
		for (i = 0; i < ((u8)(Signal_Data_Ptr->Low_Time_ms / Scale_ms)); i++) {
    136c:	00 e0       	ldi	r16, 0x00	; 0
    136e:	0c c0       	rjmp	.+24     	; 0x1388 <PWMDrawer_DrawSignal+0x16e>
			GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_LOW_LINE); pixel_width_count += 5;
    1370:	20 e4       	ldi	r18, 0x40	; 64
    1372:	30 e4       	ldi	r19, 0x40	; 64
    1374:	40 e4       	ldi	r20, 0x40	; 64
    1376:	50 e4       	ldi	r21, 0x40	; 64
    1378:	60 e4       	ldi	r22, 0x40	; 64
    137a:	70 e0       	ldi	r23, 0x00	; 0
    137c:	80 e0       	ldi	r24, 0x00	; 0
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	0e 94 9c 02 	call	0x538	; 0x538 <GLCD_DisplaySpecialPattern>
    1384:	1b 5f       	subi	r17, 0xFB	; 251
		GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_RISING_EDGE); pixel_width_count += 5;
		for (i = 0; i < ((u8)(Signal_Data_Ptr->High_Time_ms / Scale_ms)); i++) {
			GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_HIGH_LINE); pixel_width_count += 5;
		}
		GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_FALLING_EDGE); pixel_width_count += 5;
		for (i = 0; i < ((u8)(Signal_Data_Ptr->Low_Time_ms / Scale_ms)); i++) {
    1386:	0f 5f       	subi	r16, 0xFF	; 255
    1388:	f5 01       	movw	r30, r10
    138a:	65 81       	ldd	r22, Z+5	; 0x05
    138c:	76 81       	ldd	r23, Z+6	; 0x06
    138e:	87 81       	ldd	r24, Z+7	; 0x07
    1390:	90 85       	ldd	r25, Z+8	; 0x08
    1392:	a7 01       	movw	r20, r14
    1394:	96 01       	movw	r18, r12
    1396:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <__divsf3>
    139a:	0e 94 46 0b 	call	0x168c	; 0x168c <__fixunssfsi>
    139e:	06 17       	cp	r16, r22
    13a0:	38 f3       	brcs	.-50     	; 0x1370 <PWMDrawer_DrawSignal+0x156>
	GLCD_DisplayString(txt4);

	GLCD_GoToLine(6);
	u8 pixel_width_count = 0;
	u8 i;
	while (pixel_width_count < GLCD_MAX_LINE_PIXEL_WIDTH - 8U) {
    13a2:	18 37       	cpi	r17, 0x78	; 120
    13a4:	08 f4       	brcc	.+2      	; 0x13a8 <PWMDrawer_DrawSignal+0x18e>
    13a6:	af cf       	rjmp	.-162    	; 0x1306 <PWMDrawer_DrawSignal+0xec>
		for (i = 0; i < ((u8)(Signal_Data_Ptr->Low_Time_ms / Scale_ms)); i++) {
			GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_LOW_LINE); pixel_width_count += 5;
		}
	}

	GLCD_GoToLine(5);
    13a8:	85 e0       	ldi	r24, 0x05	; 5
    13aa:	0e 94 36 05 	call	0xa6c	; 0xa6c <GLCD_GoToLine>
	GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_LEFT_ARROW_HEAD);
    13ae:	20 e0       	ldi	r18, 0x00	; 0
    13b0:	3e e3       	ldi	r19, 0x3E	; 62
    13b2:	48 e0       	ldi	r20, 0x08	; 8
    13b4:	5c e1       	ldi	r21, 0x1C	; 28
    13b6:	6a e2       	ldi	r22, 0x2A	; 42
    13b8:	70 e0       	ldi	r23, 0x00	; 0
    13ba:	80 e0       	ldi	r24, 0x00	; 0
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	0e 94 9c 02 	call	0x538	; 0x538 <GLCD_DisplaySpecialPattern>
	for (i = 0; i < ((u8)(Signal_Data_Ptr->High_Time_ms / Scale_ms)); i++) {
    13c2:	10 e0       	ldi	r17, 0x00	; 0
    13c4:	0b c0       	rjmp	.+22     	; 0x13dc <PWMDrawer_DrawSignal+0x1c2>
		GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_ARROW_MIDDLE_BODY);
    13c6:	28 e0       	ldi	r18, 0x08	; 8
    13c8:	38 e0       	ldi	r19, 0x08	; 8
    13ca:	48 e0       	ldi	r20, 0x08	; 8
    13cc:	58 e0       	ldi	r21, 0x08	; 8
    13ce:	68 e0       	ldi	r22, 0x08	; 8
    13d0:	70 e0       	ldi	r23, 0x00	; 0
    13d2:	80 e0       	ldi	r24, 0x00	; 0
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	0e 94 9c 02 	call	0x538	; 0x538 <GLCD_DisplaySpecialPattern>
		}
	}

	GLCD_GoToLine(5);
	GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_LEFT_ARROW_HEAD);
	for (i = 0; i < ((u8)(Signal_Data_Ptr->High_Time_ms / Scale_ms)); i++) {
    13da:	1f 5f       	subi	r17, 0xFF	; 255
    13dc:	d5 01       	movw	r26, r10
    13de:	11 96       	adiw	r26, 0x01	; 1
    13e0:	6d 91       	ld	r22, X+
    13e2:	7d 91       	ld	r23, X+
    13e4:	8d 91       	ld	r24, X+
    13e6:	9c 91       	ld	r25, X
    13e8:	14 97       	sbiw	r26, 0x04	; 4
    13ea:	a7 01       	movw	r20, r14
    13ec:	96 01       	movw	r18, r12
    13ee:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <__divsf3>
    13f2:	0e 94 46 0b 	call	0x168c	; 0x168c <__fixunssfsi>
    13f6:	16 17       	cp	r17, r22
    13f8:	30 f3       	brcs	.-52     	; 0x13c6 <PWMDrawer_DrawSignal+0x1ac>
		GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_ARROW_MIDDLE_BODY);
	}
	GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_ARROW_MIDDLE_BODY);
    13fa:	28 e0       	ldi	r18, 0x08	; 8
    13fc:	38 e0       	ldi	r19, 0x08	; 8
    13fe:	48 e0       	ldi	r20, 0x08	; 8
    1400:	58 e0       	ldi	r21, 0x08	; 8
    1402:	68 e0       	ldi	r22, 0x08	; 8
    1404:	70 e0       	ldi	r23, 0x00	; 0
    1406:	80 e0       	ldi	r24, 0x00	; 0
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	0e 94 9c 02 	call	0x538	; 0x538 <GLCD_DisplaySpecialPattern>
	for (i = 0; i < ((u8)(Signal_Data_Ptr->Low_Time_ms / Scale_ms)); i++) {
    140e:	10 e0       	ldi	r17, 0x00	; 0
    1410:	0b c0       	rjmp	.+22     	; 0x1428 <PWMDrawer_DrawSignal+0x20e>
		GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_ARROW_MIDDLE_BODY);
    1412:	28 e0       	ldi	r18, 0x08	; 8
    1414:	38 e0       	ldi	r19, 0x08	; 8
    1416:	48 e0       	ldi	r20, 0x08	; 8
    1418:	58 e0       	ldi	r21, 0x08	; 8
    141a:	68 e0       	ldi	r22, 0x08	; 8
    141c:	70 e0       	ldi	r23, 0x00	; 0
    141e:	80 e0       	ldi	r24, 0x00	; 0
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	0e 94 9c 02 	call	0x538	; 0x538 <GLCD_DisplaySpecialPattern>
	GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_LEFT_ARROW_HEAD);
	for (i = 0; i < ((u8)(Signal_Data_Ptr->High_Time_ms / Scale_ms)); i++) {
		GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_ARROW_MIDDLE_BODY);
	}
	GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_ARROW_MIDDLE_BODY);
	for (i = 0; i < ((u8)(Signal_Data_Ptr->Low_Time_ms / Scale_ms)); i++) {
    1426:	1f 5f       	subi	r17, 0xFF	; 255
    1428:	f5 01       	movw	r30, r10
    142a:	65 81       	ldd	r22, Z+5	; 0x05
    142c:	76 81       	ldd	r23, Z+6	; 0x06
    142e:	87 81       	ldd	r24, Z+7	; 0x07
    1430:	90 85       	ldd	r25, Z+8	; 0x08
    1432:	a7 01       	movw	r20, r14
    1434:	96 01       	movw	r18, r12
    1436:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <__divsf3>
    143a:	0e 94 46 0b 	call	0x168c	; 0x168c <__fixunssfsi>
    143e:	16 17       	cp	r17, r22
    1440:	40 f3       	brcs	.-48     	; 0x1412 <PWMDrawer_DrawSignal+0x1f8>
		GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_ARROW_MIDDLE_BODY);
	}
	GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_RIGHT_ARROW_HEAD);
    1442:	2a e2       	ldi	r18, 0x2A	; 42
    1444:	3c e1       	ldi	r19, 0x1C	; 28
    1446:	48 e0       	ldi	r20, 0x08	; 8
    1448:	5e e3       	ldi	r21, 0x3E	; 62
    144a:	60 e0       	ldi	r22, 0x00	; 0
    144c:	70 e0       	ldi	r23, 0x00	; 0
    144e:	80 e0       	ldi	r24, 0x00	; 0
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	0e 94 9c 02 	call	0x538	; 0x538 <GLCD_DisplaySpecialPattern>

	GLCD_GoToLine(4);
    1456:	84 e0       	ldi	r24, 0x04	; 4
    1458:	0e 94 36 05 	call	0xa6c	; 0xa6c <GLCD_GoToLine>
	char txt5[15] = " Time=\0";
    145c:	88 e0       	ldi	r24, 0x08	; 8
    145e:	e3 e8       	ldi	r30, 0x83	; 131
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	de 01       	movw	r26, r28
    1464:	99 96       	adiw	r26, 0x29	; 41
    1466:	01 90       	ld	r0, Z+
    1468:	0d 92       	st	X+, r0
    146a:	8a 95       	dec	r24
    146c:	e1 f7       	brne	.-8      	; 0x1466 <PWMDrawer_DrawSignal+0x24c>
    146e:	fe 01       	movw	r30, r28
    1470:	f1 96       	adiw	r30, 0x31	; 49
    1472:	87 e0       	ldi	r24, 0x07	; 7
    1474:	df 01       	movw	r26, r30
    1476:	1d 92       	st	X+, r1
    1478:	8a 95       	dec	r24
    147a:	e9 f7       	brne	.-6      	; 0x1476 <PWMDrawer_DrawSignal+0x25c>
	GLCD_DisplayString(txt5);
    147c:	ce 01       	movw	r24, r28
    147e:	89 96       	adiw	r24, 0x29	; 41
    1480:	0e 94 87 04 	call	0x90e	; 0x90e <GLCD_DisplayString>
	GLCD_DisplayFloatingPoint(Signal_Data_Ptr->Period_Time_ms);
    1484:	f5 01       	movw	r30, r10
    1486:	61 85       	ldd	r22, Z+9	; 0x09
    1488:	72 85       	ldd	r23, Z+10	; 0x0a
    148a:	83 85       	ldd	r24, Z+11	; 0x0b
    148c:	94 85       	ldd	r25, Z+12	; 0x0c
    148e:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <GLCD_DisplayFloatingPoint>
	char txt6[5] = " ms\0";
    1492:	85 e0       	ldi	r24, 0x05	; 5
    1494:	e2 e9       	ldi	r30, 0x92	; 146
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	de 01       	movw	r26, r28
    149a:	d8 96       	adiw	r26, 0x38	; 56
    149c:	01 90       	ld	r0, Z+
    149e:	0d 92       	st	X+, r0
    14a0:	8a 95       	dec	r24
    14a2:	e1 f7       	brne	.-8      	; 0x149c <PWMDrawer_DrawSignal+0x282>
	GLCD_DisplayString(txt6);
    14a4:	ce 01       	movw	r24, r28
    14a6:	c8 96       	adiw	r24, 0x38	; 56
    14a8:	0e 94 87 04 	call	0x90e	; 0x90e <GLCD_DisplayString>
}
    14ac:	ec 96       	adiw	r28, 0x3c	; 60
    14ae:	0f b6       	in	r0, 0x3f	; 63
    14b0:	f8 94       	cli
    14b2:	de bf       	out	0x3e, r29	; 62
    14b4:	0f be       	out	0x3f, r0	; 63
    14b6:	cd bf       	out	0x3d, r28	; 61
    14b8:	df 91       	pop	r29
    14ba:	cf 91       	pop	r28
    14bc:	1f 91       	pop	r17
    14be:	0f 91       	pop	r16
    14c0:	ff 90       	pop	r15
    14c2:	ef 90       	pop	r14
    14c4:	df 90       	pop	r13
    14c6:	cf 90       	pop	r12
    14c8:	bf 90       	pop	r11
    14ca:	af 90       	pop	r10
    14cc:	08 95       	ret

000014ce <__subsf3>:
    14ce:	50 58       	subi	r21, 0x80	; 128

000014d0 <__addsf3>:
    14d0:	bb 27       	eor	r27, r27
    14d2:	aa 27       	eor	r26, r26
    14d4:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <__addsf3x>
    14d8:	0c 94 c9 0b 	jmp	0x1792	; 0x1792 <__fp_round>
    14dc:	0e 94 bb 0b 	call	0x1776	; 0x1776 <__fp_pscA>
    14e0:	38 f0       	brcs	.+14     	; 0x14f0 <__addsf3+0x20>
    14e2:	0e 94 c2 0b 	call	0x1784	; 0x1784 <__fp_pscB>
    14e6:	20 f0       	brcs	.+8      	; 0x14f0 <__addsf3+0x20>
    14e8:	39 f4       	brne	.+14     	; 0x14f8 <__addsf3+0x28>
    14ea:	9f 3f       	cpi	r25, 0xFF	; 255
    14ec:	19 f4       	brne	.+6      	; 0x14f4 <__addsf3+0x24>
    14ee:	26 f4       	brtc	.+8      	; 0x14f8 <__addsf3+0x28>
    14f0:	0c 94 b8 0b 	jmp	0x1770	; 0x1770 <__fp_nan>
    14f4:	0e f4       	brtc	.+2      	; 0x14f8 <__addsf3+0x28>
    14f6:	e0 95       	com	r30
    14f8:	e7 fb       	bst	r30, 7
    14fa:	0c 94 b2 0b 	jmp	0x1764	; 0x1764 <__fp_inf>

000014fe <__addsf3x>:
    14fe:	e9 2f       	mov	r30, r25
    1500:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <__fp_split3>
    1504:	58 f3       	brcs	.-42     	; 0x14dc <__addsf3+0xc>
    1506:	ba 17       	cp	r27, r26
    1508:	62 07       	cpc	r22, r18
    150a:	73 07       	cpc	r23, r19
    150c:	84 07       	cpc	r24, r20
    150e:	95 07       	cpc	r25, r21
    1510:	20 f0       	brcs	.+8      	; 0x151a <__addsf3x+0x1c>
    1512:	79 f4       	brne	.+30     	; 0x1532 <__addsf3x+0x34>
    1514:	a6 f5       	brtc	.+104    	; 0x157e <__addsf3x+0x80>
    1516:	0c 94 fc 0b 	jmp	0x17f8	; 0x17f8 <__fp_zero>
    151a:	0e f4       	brtc	.+2      	; 0x151e <__addsf3x+0x20>
    151c:	e0 95       	com	r30
    151e:	0b 2e       	mov	r0, r27
    1520:	ba 2f       	mov	r27, r26
    1522:	a0 2d       	mov	r26, r0
    1524:	0b 01       	movw	r0, r22
    1526:	b9 01       	movw	r22, r18
    1528:	90 01       	movw	r18, r0
    152a:	0c 01       	movw	r0, r24
    152c:	ca 01       	movw	r24, r20
    152e:	a0 01       	movw	r20, r0
    1530:	11 24       	eor	r1, r1
    1532:	ff 27       	eor	r31, r31
    1534:	59 1b       	sub	r21, r25
    1536:	99 f0       	breq	.+38     	; 0x155e <__addsf3x+0x60>
    1538:	59 3f       	cpi	r21, 0xF9	; 249
    153a:	50 f4       	brcc	.+20     	; 0x1550 <__addsf3x+0x52>
    153c:	50 3e       	cpi	r21, 0xE0	; 224
    153e:	68 f1       	brcs	.+90     	; 0x159a <__addsf3x+0x9c>
    1540:	1a 16       	cp	r1, r26
    1542:	f0 40       	sbci	r31, 0x00	; 0
    1544:	a2 2f       	mov	r26, r18
    1546:	23 2f       	mov	r18, r19
    1548:	34 2f       	mov	r19, r20
    154a:	44 27       	eor	r20, r20
    154c:	58 5f       	subi	r21, 0xF8	; 248
    154e:	f3 cf       	rjmp	.-26     	; 0x1536 <__addsf3x+0x38>
    1550:	46 95       	lsr	r20
    1552:	37 95       	ror	r19
    1554:	27 95       	ror	r18
    1556:	a7 95       	ror	r26
    1558:	f0 40       	sbci	r31, 0x00	; 0
    155a:	53 95       	inc	r21
    155c:	c9 f7       	brne	.-14     	; 0x1550 <__addsf3x+0x52>
    155e:	7e f4       	brtc	.+30     	; 0x157e <__addsf3x+0x80>
    1560:	1f 16       	cp	r1, r31
    1562:	ba 0b       	sbc	r27, r26
    1564:	62 0b       	sbc	r22, r18
    1566:	73 0b       	sbc	r23, r19
    1568:	84 0b       	sbc	r24, r20
    156a:	ba f0       	brmi	.+46     	; 0x159a <__addsf3x+0x9c>
    156c:	91 50       	subi	r25, 0x01	; 1
    156e:	a1 f0       	breq	.+40     	; 0x1598 <__addsf3x+0x9a>
    1570:	ff 0f       	add	r31, r31
    1572:	bb 1f       	adc	r27, r27
    1574:	66 1f       	adc	r22, r22
    1576:	77 1f       	adc	r23, r23
    1578:	88 1f       	adc	r24, r24
    157a:	c2 f7       	brpl	.-16     	; 0x156c <__addsf3x+0x6e>
    157c:	0e c0       	rjmp	.+28     	; 0x159a <__addsf3x+0x9c>
    157e:	ba 0f       	add	r27, r26
    1580:	62 1f       	adc	r22, r18
    1582:	73 1f       	adc	r23, r19
    1584:	84 1f       	adc	r24, r20
    1586:	48 f4       	brcc	.+18     	; 0x159a <__addsf3x+0x9c>
    1588:	87 95       	ror	r24
    158a:	77 95       	ror	r23
    158c:	67 95       	ror	r22
    158e:	b7 95       	ror	r27
    1590:	f7 95       	ror	r31
    1592:	9e 3f       	cpi	r25, 0xFE	; 254
    1594:	08 f0       	brcs	.+2      	; 0x1598 <__addsf3x+0x9a>
    1596:	b0 cf       	rjmp	.-160    	; 0x14f8 <__addsf3+0x28>
    1598:	93 95       	inc	r25
    159a:	88 0f       	add	r24, r24
    159c:	08 f0       	brcs	.+2      	; 0x15a0 <__addsf3x+0xa2>
    159e:	99 27       	eor	r25, r25
    15a0:	ee 0f       	add	r30, r30
    15a2:	97 95       	ror	r25
    15a4:	87 95       	ror	r24
    15a6:	08 95       	ret

000015a8 <__divsf3>:
    15a8:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <__divsf3x>
    15ac:	0c 94 c9 0b 	jmp	0x1792	; 0x1792 <__fp_round>
    15b0:	0e 94 c2 0b 	call	0x1784	; 0x1784 <__fp_pscB>
    15b4:	58 f0       	brcs	.+22     	; 0x15cc <__divsf3+0x24>
    15b6:	0e 94 bb 0b 	call	0x1776	; 0x1776 <__fp_pscA>
    15ba:	40 f0       	brcs	.+16     	; 0x15cc <__divsf3+0x24>
    15bc:	29 f4       	brne	.+10     	; 0x15c8 <__divsf3+0x20>
    15be:	5f 3f       	cpi	r21, 0xFF	; 255
    15c0:	29 f0       	breq	.+10     	; 0x15cc <__divsf3+0x24>
    15c2:	0c 94 b2 0b 	jmp	0x1764	; 0x1764 <__fp_inf>
    15c6:	51 11       	cpse	r21, r1
    15c8:	0c 94 fd 0b 	jmp	0x17fa	; 0x17fa <__fp_szero>
    15cc:	0c 94 b8 0b 	jmp	0x1770	; 0x1770 <__fp_nan>

000015d0 <__divsf3x>:
    15d0:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <__fp_split3>
    15d4:	68 f3       	brcs	.-38     	; 0x15b0 <__divsf3+0x8>

000015d6 <__divsf3_pse>:
    15d6:	99 23       	and	r25, r25
    15d8:	b1 f3       	breq	.-20     	; 0x15c6 <__divsf3+0x1e>
    15da:	55 23       	and	r21, r21
    15dc:	91 f3       	breq	.-28     	; 0x15c2 <__divsf3+0x1a>
    15de:	95 1b       	sub	r25, r21
    15e0:	55 0b       	sbc	r21, r21
    15e2:	bb 27       	eor	r27, r27
    15e4:	aa 27       	eor	r26, r26
    15e6:	62 17       	cp	r22, r18
    15e8:	73 07       	cpc	r23, r19
    15ea:	84 07       	cpc	r24, r20
    15ec:	38 f0       	brcs	.+14     	; 0x15fc <__divsf3_pse+0x26>
    15ee:	9f 5f       	subi	r25, 0xFF	; 255
    15f0:	5f 4f       	sbci	r21, 0xFF	; 255
    15f2:	22 0f       	add	r18, r18
    15f4:	33 1f       	adc	r19, r19
    15f6:	44 1f       	adc	r20, r20
    15f8:	aa 1f       	adc	r26, r26
    15fa:	a9 f3       	breq	.-22     	; 0x15e6 <__divsf3_pse+0x10>
    15fc:	35 d0       	rcall	.+106    	; 0x1668 <__divsf3_pse+0x92>
    15fe:	0e 2e       	mov	r0, r30
    1600:	3a f0       	brmi	.+14     	; 0x1610 <__divsf3_pse+0x3a>
    1602:	e0 e8       	ldi	r30, 0x80	; 128
    1604:	32 d0       	rcall	.+100    	; 0x166a <__divsf3_pse+0x94>
    1606:	91 50       	subi	r25, 0x01	; 1
    1608:	50 40       	sbci	r21, 0x00	; 0
    160a:	e6 95       	lsr	r30
    160c:	00 1c       	adc	r0, r0
    160e:	ca f7       	brpl	.-14     	; 0x1602 <__divsf3_pse+0x2c>
    1610:	2b d0       	rcall	.+86     	; 0x1668 <__divsf3_pse+0x92>
    1612:	fe 2f       	mov	r31, r30
    1614:	29 d0       	rcall	.+82     	; 0x1668 <__divsf3_pse+0x92>
    1616:	66 0f       	add	r22, r22
    1618:	77 1f       	adc	r23, r23
    161a:	88 1f       	adc	r24, r24
    161c:	bb 1f       	adc	r27, r27
    161e:	26 17       	cp	r18, r22
    1620:	37 07       	cpc	r19, r23
    1622:	48 07       	cpc	r20, r24
    1624:	ab 07       	cpc	r26, r27
    1626:	b0 e8       	ldi	r27, 0x80	; 128
    1628:	09 f0       	breq	.+2      	; 0x162c <__divsf3_pse+0x56>
    162a:	bb 0b       	sbc	r27, r27
    162c:	80 2d       	mov	r24, r0
    162e:	bf 01       	movw	r22, r30
    1630:	ff 27       	eor	r31, r31
    1632:	93 58       	subi	r25, 0x83	; 131
    1634:	5f 4f       	sbci	r21, 0xFF	; 255
    1636:	3a f0       	brmi	.+14     	; 0x1646 <__divsf3_pse+0x70>
    1638:	9e 3f       	cpi	r25, 0xFE	; 254
    163a:	51 05       	cpc	r21, r1
    163c:	78 f0       	brcs	.+30     	; 0x165c <__divsf3_pse+0x86>
    163e:	0c 94 b2 0b 	jmp	0x1764	; 0x1764 <__fp_inf>
    1642:	0c 94 fd 0b 	jmp	0x17fa	; 0x17fa <__fp_szero>
    1646:	5f 3f       	cpi	r21, 0xFF	; 255
    1648:	e4 f3       	brlt	.-8      	; 0x1642 <__divsf3_pse+0x6c>
    164a:	98 3e       	cpi	r25, 0xE8	; 232
    164c:	d4 f3       	brlt	.-12     	; 0x1642 <__divsf3_pse+0x6c>
    164e:	86 95       	lsr	r24
    1650:	77 95       	ror	r23
    1652:	67 95       	ror	r22
    1654:	b7 95       	ror	r27
    1656:	f7 95       	ror	r31
    1658:	9f 5f       	subi	r25, 0xFF	; 255
    165a:	c9 f7       	brne	.-14     	; 0x164e <__divsf3_pse+0x78>
    165c:	88 0f       	add	r24, r24
    165e:	91 1d       	adc	r25, r1
    1660:	96 95       	lsr	r25
    1662:	87 95       	ror	r24
    1664:	97 f9       	bld	r25, 7
    1666:	08 95       	ret
    1668:	e1 e0       	ldi	r30, 0x01	; 1
    166a:	66 0f       	add	r22, r22
    166c:	77 1f       	adc	r23, r23
    166e:	88 1f       	adc	r24, r24
    1670:	bb 1f       	adc	r27, r27
    1672:	62 17       	cp	r22, r18
    1674:	73 07       	cpc	r23, r19
    1676:	84 07       	cpc	r24, r20
    1678:	ba 07       	cpc	r27, r26
    167a:	20 f0       	brcs	.+8      	; 0x1684 <__divsf3_pse+0xae>
    167c:	62 1b       	sub	r22, r18
    167e:	73 0b       	sbc	r23, r19
    1680:	84 0b       	sbc	r24, r20
    1682:	ba 0b       	sbc	r27, r26
    1684:	ee 1f       	adc	r30, r30
    1686:	88 f7       	brcc	.-30     	; 0x166a <__divsf3_pse+0x94>
    1688:	e0 95       	com	r30
    168a:	08 95       	ret

0000168c <__fixunssfsi>:
    168c:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <__fp_splitA>
    1690:	88 f0       	brcs	.+34     	; 0x16b4 <__fixunssfsi+0x28>
    1692:	9f 57       	subi	r25, 0x7F	; 127
    1694:	98 f0       	brcs	.+38     	; 0x16bc <__fixunssfsi+0x30>
    1696:	b9 2f       	mov	r27, r25
    1698:	99 27       	eor	r25, r25
    169a:	b7 51       	subi	r27, 0x17	; 23
    169c:	b0 f0       	brcs	.+44     	; 0x16ca <__fixunssfsi+0x3e>
    169e:	e1 f0       	breq	.+56     	; 0x16d8 <__fixunssfsi+0x4c>
    16a0:	66 0f       	add	r22, r22
    16a2:	77 1f       	adc	r23, r23
    16a4:	88 1f       	adc	r24, r24
    16a6:	99 1f       	adc	r25, r25
    16a8:	1a f0       	brmi	.+6      	; 0x16b0 <__fixunssfsi+0x24>
    16aa:	ba 95       	dec	r27
    16ac:	c9 f7       	brne	.-14     	; 0x16a0 <__fixunssfsi+0x14>
    16ae:	14 c0       	rjmp	.+40     	; 0x16d8 <__fixunssfsi+0x4c>
    16b0:	b1 30       	cpi	r27, 0x01	; 1
    16b2:	91 f0       	breq	.+36     	; 0x16d8 <__fixunssfsi+0x4c>
    16b4:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <__fp_zero>
    16b8:	b1 e0       	ldi	r27, 0x01	; 1
    16ba:	08 95       	ret
    16bc:	0c 94 fc 0b 	jmp	0x17f8	; 0x17f8 <__fp_zero>
    16c0:	67 2f       	mov	r22, r23
    16c2:	78 2f       	mov	r23, r24
    16c4:	88 27       	eor	r24, r24
    16c6:	b8 5f       	subi	r27, 0xF8	; 248
    16c8:	39 f0       	breq	.+14     	; 0x16d8 <__fixunssfsi+0x4c>
    16ca:	b9 3f       	cpi	r27, 0xF9	; 249
    16cc:	cc f3       	brlt	.-14     	; 0x16c0 <__fixunssfsi+0x34>
    16ce:	86 95       	lsr	r24
    16d0:	77 95       	ror	r23
    16d2:	67 95       	ror	r22
    16d4:	b3 95       	inc	r27
    16d6:	d9 f7       	brne	.-10     	; 0x16ce <__fixunssfsi+0x42>
    16d8:	3e f4       	brtc	.+14     	; 0x16e8 <__fixunssfsi+0x5c>
    16da:	90 95       	com	r25
    16dc:	80 95       	com	r24
    16de:	70 95       	com	r23
    16e0:	61 95       	neg	r22
    16e2:	7f 4f       	sbci	r23, 0xFF	; 255
    16e4:	8f 4f       	sbci	r24, 0xFF	; 255
    16e6:	9f 4f       	sbci	r25, 0xFF	; 255
    16e8:	08 95       	ret

000016ea <__floatunsisf>:
    16ea:	e8 94       	clt
    16ec:	09 c0       	rjmp	.+18     	; 0x1700 <__floatsisf+0x12>

000016ee <__floatsisf>:
    16ee:	97 fb       	bst	r25, 7
    16f0:	3e f4       	brtc	.+14     	; 0x1700 <__floatsisf+0x12>
    16f2:	90 95       	com	r25
    16f4:	80 95       	com	r24
    16f6:	70 95       	com	r23
    16f8:	61 95       	neg	r22
    16fa:	7f 4f       	sbci	r23, 0xFF	; 255
    16fc:	8f 4f       	sbci	r24, 0xFF	; 255
    16fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1700:	99 23       	and	r25, r25
    1702:	a9 f0       	breq	.+42     	; 0x172e <__floatsisf+0x40>
    1704:	f9 2f       	mov	r31, r25
    1706:	96 e9       	ldi	r25, 0x96	; 150
    1708:	bb 27       	eor	r27, r27
    170a:	93 95       	inc	r25
    170c:	f6 95       	lsr	r31
    170e:	87 95       	ror	r24
    1710:	77 95       	ror	r23
    1712:	67 95       	ror	r22
    1714:	b7 95       	ror	r27
    1716:	f1 11       	cpse	r31, r1
    1718:	f8 cf       	rjmp	.-16     	; 0x170a <__floatsisf+0x1c>
    171a:	fa f4       	brpl	.+62     	; 0x175a <__floatsisf+0x6c>
    171c:	bb 0f       	add	r27, r27
    171e:	11 f4       	brne	.+4      	; 0x1724 <__floatsisf+0x36>
    1720:	60 ff       	sbrs	r22, 0
    1722:	1b c0       	rjmp	.+54     	; 0x175a <__floatsisf+0x6c>
    1724:	6f 5f       	subi	r22, 0xFF	; 255
    1726:	7f 4f       	sbci	r23, 0xFF	; 255
    1728:	8f 4f       	sbci	r24, 0xFF	; 255
    172a:	9f 4f       	sbci	r25, 0xFF	; 255
    172c:	16 c0       	rjmp	.+44     	; 0x175a <__floatsisf+0x6c>
    172e:	88 23       	and	r24, r24
    1730:	11 f0       	breq	.+4      	; 0x1736 <__floatsisf+0x48>
    1732:	96 e9       	ldi	r25, 0x96	; 150
    1734:	11 c0       	rjmp	.+34     	; 0x1758 <__floatsisf+0x6a>
    1736:	77 23       	and	r23, r23
    1738:	21 f0       	breq	.+8      	; 0x1742 <__floatsisf+0x54>
    173a:	9e e8       	ldi	r25, 0x8E	; 142
    173c:	87 2f       	mov	r24, r23
    173e:	76 2f       	mov	r23, r22
    1740:	05 c0       	rjmp	.+10     	; 0x174c <__floatsisf+0x5e>
    1742:	66 23       	and	r22, r22
    1744:	71 f0       	breq	.+28     	; 0x1762 <__floatsisf+0x74>
    1746:	96 e8       	ldi	r25, 0x86	; 134
    1748:	86 2f       	mov	r24, r22
    174a:	70 e0       	ldi	r23, 0x00	; 0
    174c:	60 e0       	ldi	r22, 0x00	; 0
    174e:	2a f0       	brmi	.+10     	; 0x175a <__floatsisf+0x6c>
    1750:	9a 95       	dec	r25
    1752:	66 0f       	add	r22, r22
    1754:	77 1f       	adc	r23, r23
    1756:	88 1f       	adc	r24, r24
    1758:	da f7       	brpl	.-10     	; 0x1750 <__floatsisf+0x62>
    175a:	88 0f       	add	r24, r24
    175c:	96 95       	lsr	r25
    175e:	87 95       	ror	r24
    1760:	97 f9       	bld	r25, 7
    1762:	08 95       	ret

00001764 <__fp_inf>:
    1764:	97 f9       	bld	r25, 7
    1766:	9f 67       	ori	r25, 0x7F	; 127
    1768:	80 e8       	ldi	r24, 0x80	; 128
    176a:	70 e0       	ldi	r23, 0x00	; 0
    176c:	60 e0       	ldi	r22, 0x00	; 0
    176e:	08 95       	ret

00001770 <__fp_nan>:
    1770:	9f ef       	ldi	r25, 0xFF	; 255
    1772:	80 ec       	ldi	r24, 0xC0	; 192
    1774:	08 95       	ret

00001776 <__fp_pscA>:
    1776:	00 24       	eor	r0, r0
    1778:	0a 94       	dec	r0
    177a:	16 16       	cp	r1, r22
    177c:	17 06       	cpc	r1, r23
    177e:	18 06       	cpc	r1, r24
    1780:	09 06       	cpc	r0, r25
    1782:	08 95       	ret

00001784 <__fp_pscB>:
    1784:	00 24       	eor	r0, r0
    1786:	0a 94       	dec	r0
    1788:	12 16       	cp	r1, r18
    178a:	13 06       	cpc	r1, r19
    178c:	14 06       	cpc	r1, r20
    178e:	05 06       	cpc	r0, r21
    1790:	08 95       	ret

00001792 <__fp_round>:
    1792:	09 2e       	mov	r0, r25
    1794:	03 94       	inc	r0
    1796:	00 0c       	add	r0, r0
    1798:	11 f4       	brne	.+4      	; 0x179e <__fp_round+0xc>
    179a:	88 23       	and	r24, r24
    179c:	52 f0       	brmi	.+20     	; 0x17b2 <__fp_round+0x20>
    179e:	bb 0f       	add	r27, r27
    17a0:	40 f4       	brcc	.+16     	; 0x17b2 <__fp_round+0x20>
    17a2:	bf 2b       	or	r27, r31
    17a4:	11 f4       	brne	.+4      	; 0x17aa <__fp_round+0x18>
    17a6:	60 ff       	sbrs	r22, 0
    17a8:	04 c0       	rjmp	.+8      	; 0x17b2 <__fp_round+0x20>
    17aa:	6f 5f       	subi	r22, 0xFF	; 255
    17ac:	7f 4f       	sbci	r23, 0xFF	; 255
    17ae:	8f 4f       	sbci	r24, 0xFF	; 255
    17b0:	9f 4f       	sbci	r25, 0xFF	; 255
    17b2:	08 95       	ret

000017b4 <__fp_split3>:
    17b4:	57 fd       	sbrc	r21, 7
    17b6:	90 58       	subi	r25, 0x80	; 128
    17b8:	44 0f       	add	r20, r20
    17ba:	55 1f       	adc	r21, r21
    17bc:	59 f0       	breq	.+22     	; 0x17d4 <__fp_splitA+0x10>
    17be:	5f 3f       	cpi	r21, 0xFF	; 255
    17c0:	71 f0       	breq	.+28     	; 0x17de <__fp_splitA+0x1a>
    17c2:	47 95       	ror	r20

000017c4 <__fp_splitA>:
    17c4:	88 0f       	add	r24, r24
    17c6:	97 fb       	bst	r25, 7
    17c8:	99 1f       	adc	r25, r25
    17ca:	61 f0       	breq	.+24     	; 0x17e4 <__fp_splitA+0x20>
    17cc:	9f 3f       	cpi	r25, 0xFF	; 255
    17ce:	79 f0       	breq	.+30     	; 0x17ee <__fp_splitA+0x2a>
    17d0:	87 95       	ror	r24
    17d2:	08 95       	ret
    17d4:	12 16       	cp	r1, r18
    17d6:	13 06       	cpc	r1, r19
    17d8:	14 06       	cpc	r1, r20
    17da:	55 1f       	adc	r21, r21
    17dc:	f2 cf       	rjmp	.-28     	; 0x17c2 <__fp_split3+0xe>
    17de:	46 95       	lsr	r20
    17e0:	f1 df       	rcall	.-30     	; 0x17c4 <__fp_splitA>
    17e2:	08 c0       	rjmp	.+16     	; 0x17f4 <__fp_splitA+0x30>
    17e4:	16 16       	cp	r1, r22
    17e6:	17 06       	cpc	r1, r23
    17e8:	18 06       	cpc	r1, r24
    17ea:	99 1f       	adc	r25, r25
    17ec:	f1 cf       	rjmp	.-30     	; 0x17d0 <__fp_splitA+0xc>
    17ee:	86 95       	lsr	r24
    17f0:	71 05       	cpc	r23, r1
    17f2:	61 05       	cpc	r22, r1
    17f4:	08 94       	sec
    17f6:	08 95       	ret

000017f8 <__fp_zero>:
    17f8:	e8 94       	clt

000017fa <__fp_szero>:
    17fa:	bb 27       	eor	r27, r27
    17fc:	66 27       	eor	r22, r22
    17fe:	77 27       	eor	r23, r23
    1800:	cb 01       	movw	r24, r22
    1802:	97 f9       	bld	r25, 7
    1804:	08 95       	ret

00001806 <__mulsf3>:
    1806:	0e 94 16 0c 	call	0x182c	; 0x182c <__mulsf3x>
    180a:	0c 94 c9 0b 	jmp	0x1792	; 0x1792 <__fp_round>
    180e:	0e 94 bb 0b 	call	0x1776	; 0x1776 <__fp_pscA>
    1812:	38 f0       	brcs	.+14     	; 0x1822 <__mulsf3+0x1c>
    1814:	0e 94 c2 0b 	call	0x1784	; 0x1784 <__fp_pscB>
    1818:	20 f0       	brcs	.+8      	; 0x1822 <__mulsf3+0x1c>
    181a:	95 23       	and	r25, r21
    181c:	11 f0       	breq	.+4      	; 0x1822 <__mulsf3+0x1c>
    181e:	0c 94 b2 0b 	jmp	0x1764	; 0x1764 <__fp_inf>
    1822:	0c 94 b8 0b 	jmp	0x1770	; 0x1770 <__fp_nan>
    1826:	11 24       	eor	r1, r1
    1828:	0c 94 fd 0b 	jmp	0x17fa	; 0x17fa <__fp_szero>

0000182c <__mulsf3x>:
    182c:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <__fp_split3>
    1830:	70 f3       	brcs	.-36     	; 0x180e <__mulsf3+0x8>

00001832 <__mulsf3_pse>:
    1832:	95 9f       	mul	r25, r21
    1834:	c1 f3       	breq	.-16     	; 0x1826 <__mulsf3+0x20>
    1836:	95 0f       	add	r25, r21
    1838:	50 e0       	ldi	r21, 0x00	; 0
    183a:	55 1f       	adc	r21, r21
    183c:	62 9f       	mul	r22, r18
    183e:	f0 01       	movw	r30, r0
    1840:	72 9f       	mul	r23, r18
    1842:	bb 27       	eor	r27, r27
    1844:	f0 0d       	add	r31, r0
    1846:	b1 1d       	adc	r27, r1
    1848:	63 9f       	mul	r22, r19
    184a:	aa 27       	eor	r26, r26
    184c:	f0 0d       	add	r31, r0
    184e:	b1 1d       	adc	r27, r1
    1850:	aa 1f       	adc	r26, r26
    1852:	64 9f       	mul	r22, r20
    1854:	66 27       	eor	r22, r22
    1856:	b0 0d       	add	r27, r0
    1858:	a1 1d       	adc	r26, r1
    185a:	66 1f       	adc	r22, r22
    185c:	82 9f       	mul	r24, r18
    185e:	22 27       	eor	r18, r18
    1860:	b0 0d       	add	r27, r0
    1862:	a1 1d       	adc	r26, r1
    1864:	62 1f       	adc	r22, r18
    1866:	73 9f       	mul	r23, r19
    1868:	b0 0d       	add	r27, r0
    186a:	a1 1d       	adc	r26, r1
    186c:	62 1f       	adc	r22, r18
    186e:	83 9f       	mul	r24, r19
    1870:	a0 0d       	add	r26, r0
    1872:	61 1d       	adc	r22, r1
    1874:	22 1f       	adc	r18, r18
    1876:	74 9f       	mul	r23, r20
    1878:	33 27       	eor	r19, r19
    187a:	a0 0d       	add	r26, r0
    187c:	61 1d       	adc	r22, r1
    187e:	23 1f       	adc	r18, r19
    1880:	84 9f       	mul	r24, r20
    1882:	60 0d       	add	r22, r0
    1884:	21 1d       	adc	r18, r1
    1886:	82 2f       	mov	r24, r18
    1888:	76 2f       	mov	r23, r22
    188a:	6a 2f       	mov	r22, r26
    188c:	11 24       	eor	r1, r1
    188e:	9f 57       	subi	r25, 0x7F	; 127
    1890:	50 40       	sbci	r21, 0x00	; 0
    1892:	9a f0       	brmi	.+38     	; 0x18ba <__mulsf3_pse+0x88>
    1894:	f1 f0       	breq	.+60     	; 0x18d2 <__mulsf3_pse+0xa0>
    1896:	88 23       	and	r24, r24
    1898:	4a f0       	brmi	.+18     	; 0x18ac <__mulsf3_pse+0x7a>
    189a:	ee 0f       	add	r30, r30
    189c:	ff 1f       	adc	r31, r31
    189e:	bb 1f       	adc	r27, r27
    18a0:	66 1f       	adc	r22, r22
    18a2:	77 1f       	adc	r23, r23
    18a4:	88 1f       	adc	r24, r24
    18a6:	91 50       	subi	r25, 0x01	; 1
    18a8:	50 40       	sbci	r21, 0x00	; 0
    18aa:	a9 f7       	brne	.-22     	; 0x1896 <__mulsf3_pse+0x64>
    18ac:	9e 3f       	cpi	r25, 0xFE	; 254
    18ae:	51 05       	cpc	r21, r1
    18b0:	80 f0       	brcs	.+32     	; 0x18d2 <__mulsf3_pse+0xa0>
    18b2:	0c 94 b2 0b 	jmp	0x1764	; 0x1764 <__fp_inf>
    18b6:	0c 94 fd 0b 	jmp	0x17fa	; 0x17fa <__fp_szero>
    18ba:	5f 3f       	cpi	r21, 0xFF	; 255
    18bc:	e4 f3       	brlt	.-8      	; 0x18b6 <__mulsf3_pse+0x84>
    18be:	98 3e       	cpi	r25, 0xE8	; 232
    18c0:	d4 f3       	brlt	.-12     	; 0x18b6 <__mulsf3_pse+0x84>
    18c2:	86 95       	lsr	r24
    18c4:	77 95       	ror	r23
    18c6:	67 95       	ror	r22
    18c8:	b7 95       	ror	r27
    18ca:	f7 95       	ror	r31
    18cc:	e7 95       	ror	r30
    18ce:	9f 5f       	subi	r25, 0xFF	; 255
    18d0:	c1 f7       	brne	.-16     	; 0x18c2 <__mulsf3_pse+0x90>
    18d2:	fe 2b       	or	r31, r30
    18d4:	88 0f       	add	r24, r24
    18d6:	91 1d       	adc	r25, r1
    18d8:	96 95       	lsr	r25
    18da:	87 95       	ror	r24
    18dc:	97 f9       	bld	r25, 7
    18de:	08 95       	ret

000018e0 <__mulsi3>:
    18e0:	db 01       	movw	r26, r22
    18e2:	8f 93       	push	r24
    18e4:	9f 93       	push	r25
    18e6:	0e 94 a5 0c 	call	0x194a	; 0x194a <__muluhisi3>
    18ea:	bf 91       	pop	r27
    18ec:	af 91       	pop	r26
    18ee:	a2 9f       	mul	r26, r18
    18f0:	80 0d       	add	r24, r0
    18f2:	91 1d       	adc	r25, r1
    18f4:	a3 9f       	mul	r26, r19
    18f6:	90 0d       	add	r25, r0
    18f8:	b2 9f       	mul	r27, r18
    18fa:	90 0d       	add	r25, r0
    18fc:	11 24       	eor	r1, r1
    18fe:	08 95       	ret

00001900 <__divmodsi4>:
    1900:	05 2e       	mov	r0, r21
    1902:	97 fb       	bst	r25, 7
    1904:	1e f4       	brtc	.+6      	; 0x190c <__divmodsi4+0xc>
    1906:	00 94       	com	r0
    1908:	0e 94 97 0c 	call	0x192e	; 0x192e <__negsi2>
    190c:	57 fd       	sbrc	r21, 7
    190e:	07 d0       	rcall	.+14     	; 0x191e <__divmodsi4_neg2>
    1910:	0e 94 ce 0c 	call	0x199c	; 0x199c <__udivmodsi4>
    1914:	07 fc       	sbrc	r0, 7
    1916:	03 d0       	rcall	.+6      	; 0x191e <__divmodsi4_neg2>
    1918:	4e f4       	brtc	.+18     	; 0x192c <__divmodsi4_exit>
    191a:	0c 94 97 0c 	jmp	0x192e	; 0x192e <__negsi2>

0000191e <__divmodsi4_neg2>:
    191e:	50 95       	com	r21
    1920:	40 95       	com	r20
    1922:	30 95       	com	r19
    1924:	21 95       	neg	r18
    1926:	3f 4f       	sbci	r19, 0xFF	; 255
    1928:	4f 4f       	sbci	r20, 0xFF	; 255
    192a:	5f 4f       	sbci	r21, 0xFF	; 255

0000192c <__divmodsi4_exit>:
    192c:	08 95       	ret

0000192e <__negsi2>:
    192e:	90 95       	com	r25
    1930:	80 95       	com	r24
    1932:	70 95       	com	r23
    1934:	61 95       	neg	r22
    1936:	7f 4f       	sbci	r23, 0xFF	; 255
    1938:	8f 4f       	sbci	r24, 0xFF	; 255
    193a:	9f 4f       	sbci	r25, 0xFF	; 255
    193c:	08 95       	ret

0000193e <__tablejump2__>:
    193e:	ee 0f       	add	r30, r30
    1940:	ff 1f       	adc	r31, r31
    1942:	05 90       	lpm	r0, Z+
    1944:	f4 91       	lpm	r31, Z
    1946:	e0 2d       	mov	r30, r0
    1948:	09 94       	ijmp

0000194a <__muluhisi3>:
    194a:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <__umulhisi3>
    194e:	a5 9f       	mul	r26, r21
    1950:	90 0d       	add	r25, r0
    1952:	b4 9f       	mul	r27, r20
    1954:	90 0d       	add	r25, r0
    1956:	a4 9f       	mul	r26, r20
    1958:	80 0d       	add	r24, r0
    195a:	91 1d       	adc	r25, r1
    195c:	11 24       	eor	r1, r1
    195e:	08 95       	ret

00001960 <__ashrdi3>:
    1960:	97 fb       	bst	r25, 7
    1962:	10 f8       	bld	r1, 0

00001964 <__lshrdi3>:
    1964:	16 94       	lsr	r1
    1966:	00 08       	sbc	r0, r0
    1968:	0f 93       	push	r16
    196a:	08 30       	cpi	r16, 0x08	; 8
    196c:	98 f0       	brcs	.+38     	; 0x1994 <__lshrdi3+0x30>
    196e:	08 50       	subi	r16, 0x08	; 8
    1970:	23 2f       	mov	r18, r19
    1972:	34 2f       	mov	r19, r20
    1974:	45 2f       	mov	r20, r21
    1976:	56 2f       	mov	r21, r22
    1978:	67 2f       	mov	r22, r23
    197a:	78 2f       	mov	r23, r24
    197c:	89 2f       	mov	r24, r25
    197e:	90 2d       	mov	r25, r0
    1980:	f4 cf       	rjmp	.-24     	; 0x196a <__lshrdi3+0x6>
    1982:	05 94       	asr	r0
    1984:	97 95       	ror	r25
    1986:	87 95       	ror	r24
    1988:	77 95       	ror	r23
    198a:	67 95       	ror	r22
    198c:	57 95       	ror	r21
    198e:	47 95       	ror	r20
    1990:	37 95       	ror	r19
    1992:	27 95       	ror	r18
    1994:	0a 95       	dec	r16
    1996:	aa f7       	brpl	.-22     	; 0x1982 <__lshrdi3+0x1e>
    1998:	0f 91       	pop	r16
    199a:	08 95       	ret

0000199c <__udivmodsi4>:
    199c:	a1 e2       	ldi	r26, 0x21	; 33
    199e:	1a 2e       	mov	r1, r26
    19a0:	aa 1b       	sub	r26, r26
    19a2:	bb 1b       	sub	r27, r27
    19a4:	fd 01       	movw	r30, r26
    19a6:	0d c0       	rjmp	.+26     	; 0x19c2 <__udivmodsi4_ep>

000019a8 <__udivmodsi4_loop>:
    19a8:	aa 1f       	adc	r26, r26
    19aa:	bb 1f       	adc	r27, r27
    19ac:	ee 1f       	adc	r30, r30
    19ae:	ff 1f       	adc	r31, r31
    19b0:	a2 17       	cp	r26, r18
    19b2:	b3 07       	cpc	r27, r19
    19b4:	e4 07       	cpc	r30, r20
    19b6:	f5 07       	cpc	r31, r21
    19b8:	20 f0       	brcs	.+8      	; 0x19c2 <__udivmodsi4_ep>
    19ba:	a2 1b       	sub	r26, r18
    19bc:	b3 0b       	sbc	r27, r19
    19be:	e4 0b       	sbc	r30, r20
    19c0:	f5 0b       	sbc	r31, r21

000019c2 <__udivmodsi4_ep>:
    19c2:	66 1f       	adc	r22, r22
    19c4:	77 1f       	adc	r23, r23
    19c6:	88 1f       	adc	r24, r24
    19c8:	99 1f       	adc	r25, r25
    19ca:	1a 94       	dec	r1
    19cc:	69 f7       	brne	.-38     	; 0x19a8 <__udivmodsi4_loop>
    19ce:	60 95       	com	r22
    19d0:	70 95       	com	r23
    19d2:	80 95       	com	r24
    19d4:	90 95       	com	r25
    19d6:	9b 01       	movw	r18, r22
    19d8:	ac 01       	movw	r20, r24
    19da:	bd 01       	movw	r22, r26
    19dc:	cf 01       	movw	r24, r30
    19de:	08 95       	ret

000019e0 <__umulhisi3>:
    19e0:	a2 9f       	mul	r26, r18
    19e2:	b0 01       	movw	r22, r0
    19e4:	b3 9f       	mul	r27, r19
    19e6:	c0 01       	movw	r24, r0
    19e8:	a3 9f       	mul	r26, r19
    19ea:	70 0d       	add	r23, r0
    19ec:	81 1d       	adc	r24, r1
    19ee:	11 24       	eor	r1, r1
    19f0:	91 1d       	adc	r25, r1
    19f2:	b2 9f       	mul	r27, r18
    19f4:	70 0d       	add	r23, r0
    19f6:	81 1d       	adc	r24, r1
    19f8:	11 24       	eor	r1, r1
    19fa:	91 1d       	adc	r25, r1
    19fc:	08 95       	ret

000019fe <_exit>:
    19fe:	f8 94       	cli

00001a00 <__stop_program>:
    1a00:	ff cf       	rjmp	.-2      	; 0x1a00 <__stop_program>
